<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApiClient.JIT</name>
    </assembly>
    <members>
        <member name="T:WebApiClient.Attributes.ApiActionFilterAttribute">
            <summary>
            ApiAction的过滤器抽象特性
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiActionFilterAttribute.Enable">
            <summary>
            获取或设置是否启用
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiActionFilterAttribute.OrderIndex">
            <summary>
            获取或设置过滤器的执行排序索引
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiActionFilterAttribute.AllowMultiple">
            <summary>
            获取本类型是否允许在接口与方法上重复
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.ApiActionFilterAttribute.WebApiClient#IApiActionFilter#OnBeginRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            准备请求之前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.ApiActionFilterAttribute.WebApiClient#IApiActionFilter#OnEndRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求完成之后
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.ApiActionFilterAttribute.OnBeginRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            准备请求之前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.ApiActionFilterAttribute.OnEndRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求完成之后
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.TraceFilterAttribute">
            <summary>
            表示将请求响应内容写入统一日志的过滤器
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.TraceFilterAttribute.tagKey">
            <summary>
            tag的key
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TraceFilterAttribute.EventId">
            <summary>
            获取或设置日志的EventId
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TraceFilterAttribute.TraceRequest">
            <summary>
            获取是否输出请求内容
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TraceFilterAttribute.TraceResponse">
            <summary>
            获取是否输出响应内容
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.TraceFilterAttribute.#ctor">
            <summary>
            将请求响应内容写入统一日志的过滤器
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.TraceFilterAttribute.OnBeginRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            准备请求之前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.TraceFilterAttribute.OnEndRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求完成之后
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.TraceFilterAttribute.Request">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TraceFilterAttribute.Request.Time">
            <summary>
            请求时间
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TraceFilterAttribute.Request.Message">
            <summary>
            请求消息
            </summary>
        </member>
        <member name="T:WebApiClient.Attributes.FormFieldAttribute">
            <summary>
            表示参数值作为x-www-form-urlencoded的字段
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.FormFieldAttribute.name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.FormFieldAttribute.value">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.FormFieldAttribute.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.FormFieldAttribute.#ctor">
            <summary>
            表示参数值作为x-www-form-urlencoded的字段
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.FormFieldAttribute.#ctor(System.String,System.Object)">
            <summary>
            表示name和value写入x-www-form-urlencoded表单
            </summary>
            <param name="name">字段名称</param>
            <param name="value">字段的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.FormFieldAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.FormFieldAttribute.WebApiClient#IApiParameterAttribute#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HeaderAttribute">
            <summary>
            表示Http请求Header的特性
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.HeaderAttribute.name">
            <summary>
            Header名称
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.HeaderAttribute.value">
            <summary>
            Header值 
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HeaderAttribute.EncodeCookie">
            <summary>
            获取是对cookie的Value进行Url utf-8编码
            默认为true
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.#ctor(WebApiClient.HttpRequestHeader)">
            <summary>
            将参数值设置到Header        
            </summary>
            <param name="name">header名称</param>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.#ctor(System.String)">
            <summary>
            将参数值设置到Header      
            </summary>
            <param name="name">header名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.#ctor(WebApiClient.HttpRequestHeader,System.String)">
            <summary>
            将指定值设置到Header       
            </summary>
            <param name="name">header名称</param>
            <param name="value">header值</param>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.#ctor(System.String,System.String)">
            <summary>
            将指定值设置到Header      
            </summary>
            <param name="name">header名称</param>
            <param name="value">header值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.WebApiClient#IApiParameterAttribute#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            值从参数过来
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.SetHeaderValue(WebApiClient.Contexts.ApiActionContext,System.String)">
            <summary>
            设置请求头
            </summary>
            <param name="context"></param>
            <param name="headerValue"></param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HeaderAttribute.SetCookie(WebApiClient.Contexts.ApiActionContext,System.String)">
            <summary>
            设置Cookie值
            </summary>
            <param name="context">上下文</param>
            <param name="cookieValues">cookie值</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.Net.CookieException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.ApiActionAttribute">
            <summary>
            ApiAction修饰特性抽象
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiActionAttribute.OrderIndex">
            <summary>
            获取顺序排序索引
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiActionAttribute.AllowMultiple">
            <summary>
            获取本类型是否允许在接口与方法上重复
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.ApiActionAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.BasicAuthAttribute">
            <summary>
            表示请求的基本授权
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.BasicAuthAttribute.baiscAuth">
            <summary>
            BasicAuth
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.BasicAuthAttribute.#ctor(System.String,System.String)">
            <summary>
            基本授权
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.BasicAuthAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HttpDeleteAttribute">
            <summary>
            表示Delete请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpDeleteAttribute.#ctor">
            <summary>
            Delete请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpDeleteAttribute.#ctor(System.String)">
            <summary>
            Delete请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpGetAttribute">
            <summary>
            表示Get请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpGetAttribute.#ctor">
            <summary>
            Get请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpGetAttribute.#ctor(System.String)">
            <summary>
            Get请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpHeadAttribute">
            <summary>
            表示Head请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpHeadAttribute.#ctor">
            <summary>
            Head请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpHeadAttribute.#ctor(System.String)">
            <summary>
            Head请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpHostAttribute">
            <summary>
            表示请求服务http绝对完整主机域名
            例如http://www.webapiclient.com
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HttpHostAttribute.Host">
            <summary>
            获取根路径
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HttpHostAttribute.OrderIndex">
            <summary>
            获取顺序排序索引
            int.MinValue
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpHostAttribute.#ctor(System.String)">
            <summary>
            请求服务的根路径
            例如http://www.webapiclient.com
            </summary>
            <param name="host">请求完整绝对根路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.HttpHostAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HttpHostAttribute.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HttpMethodAttribute">
            <summary>
            表示http请求方法描述特性
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HttpMethodAttribute.Method">
            <summary>
            获取请求方法
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HttpMethodAttribute.Path">
            <summary>
            获取请求相对路径
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.HttpMethodAttribute.OrderIndex">
            <summary>
            获取顺序排序索引
            优先级最高
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpMethodAttribute.#ctor(System.Net.Http.HttpMethod)">
            <summary>
            http请求方法描述特性
            </summary>
            <param name="method">请求方法</param>
        </member>
        <member name="M:WebApiClient.Attributes.HttpMethodAttribute.#ctor(System.Net.Http.HttpMethod,System.String)">
            <summary>
            http请求方法描述特性
            </summary>
            <param name="method">请求方法</param>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="M:WebApiClient.Attributes.HttpMethodAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HttpMethodAttribute.GetRequestUri(System.Uri,System.Uri)">
            <summary>
            获取请求URL
            </summary>
            <param name="baseUri"></param>
            <param name="relative"></param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HttpOptionsAttribute">
            <summary>
            表示Options请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpOptionsAttribute.#ctor">
            <summary>
            Options请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpOptionsAttribute.#ctor(System.String)">
            <summary>
            Options请求
            </summary>
            <param name="path">相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpPatchAttribute">
            <summary>
            表示Patch请求
            不可继承
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.HttpPatchAttribute.patchMethod">
            <summary>
            表示patch请求方式
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPatchAttribute.#ctor">
            <summary>
            Patch请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPatchAttribute.#ctor(System.String)">
            <summary>
            Patch请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpPostAttribute">
            <summary>
            表示Post请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPostAttribute.#ctor">
            <summary>
            Post请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPostAttribute.#ctor(System.String)">
            <summary>
            Post请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.HttpPutAttribute">
            <summary>
            表示Put请求
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPutAttribute.#ctor">
            <summary>
            Put请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpPutAttribute.#ctor(System.String)">
            <summary>
            Put请求
            </summary>
            <param name="path">请求绝对或相对路径</param>
        </member>
        <member name="T:WebApiClient.Attributes.ProxyAttribute">
            <summary>
            表示http代理特性
            设置之后将无法改变
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.ProxyAttribute.httpProxy">
            <summary>
            http代理
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.ProxyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            http代理描述
            </summary>
            <param name="host">域名或ip</param>
            <param name="port">端口</param>    
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.ProxyAttribute.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            http代理描述
            </summary>
            <param name="host">域名或ip</param>
            <param name="port">端口</param>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.ProxyAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.TimeoutAttribute">
            <summary>
            表示此请求的超时时间
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.TimeoutAttribute.TimeSpan">
            <summary>
            获取超时时间
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            请求的超时时间
            </summary>
            <param name="milliseconds">超时时间的毫秒数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.TimeoutAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.MulitpartTextAttribute">
            <summary>
            表示参数值作为multipart/form-data表单的一个文本项
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.MulitpartTextAttribute.name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.MulitpartTextAttribute.value">
            <summary>
            字段的值
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.MulitpartTextAttribute.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartTextAttribute.#ctor">
            <summary>
            表示参数值作为multipart/form-data表单的一个文本项
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartTextAttribute.#ctor(System.String,System.Object)">
            <summary>
            表示name和value写入multipart/form-data表单
            </summary>
            <param name="name">字段名称</param>
            <param name="value">字段的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartTextAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartTextAttribute.WebApiClient#IApiParameterAttribute#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.FormContentAttribute">
            <summary>
            使用KeyValueFormatter序列化参数值得到的键值对作为x-www-form-urlencoded请求
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.FormContentAttribute.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.FormContentAttribute.DateTimeFormat">
            <summary>
            获取或设置时期时间格式
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.FormContentAttribute.#ctor">
            <summary>
            将参数值作为x-www-form-urlencoded请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.FormContentAttribute.#ctor(System.String)">
            <summary>
            将参数值作为x-www-form-urlencoded请求
            </summary>
            <param name="datetimeFormat">时期时间格式</param>
        </member>
        <member name="M:WebApiClient.Attributes.FormContentAttribute.SetHttpContentAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
        </member>
        <member name="M:WebApiClient.Attributes.FormContentAttribute.HandleForm(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            处理表单内容
            可以重写比方法
            实现字段排序、插入签名字段等
            </summary>
            <param name="form">表单</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HeadersAttribute">
            <summary>
            表示参数值作为请求头   
            对于复杂类型的参数值，将拆解作为多个Header
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HeadersAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.HttpContentAttribute">
            <summary>
            表示参数值理解为HttpContent类型的特性
            例如StringContent、ByteArrayContent、FormUrlEncodedContent等类型
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.HttpContentAttribute.WebApiClient#IApiParameterAttribute#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HttpContentAttribute.SetHttpContentAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.HttpContentAttribute.SetHttpContent(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
        </member>
        <member name="T:WebApiClient.Attributes.JsonContentAttribute">
            <summary>
            使用JsonFormatter序列化参数值得到的json文本作为application/json请求
            每个Api只能注明于其中的一个参数
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.JsonContentAttribute.encoding">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.JsonContentAttribute.Encoding">
            <summary>
            获取或设置编码名称
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:WebApiClient.Attributes.JsonContentAttribute.DateTimeFormat">
            <summary>
            获取或设置时期时间格式
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.JsonContentAttribute.#ctor">
            <summary>
            将参数值作为application/json请求
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.JsonContentAttribute.#ctor(System.String)">
            <summary>
            将参数体作为application/json请求
            </summary>
            <param name="datetimeFormat">日期时间格式</param>
        </member>
        <member name="M:WebApiClient.Attributes.JsonContentAttribute.SetHttpContent(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
        </member>
        <member name="T:WebApiClient.Attributes.MulitpartContentAttribute">
            <summary>
            使用KeyValueFormatter序列化参数值得到的键值对分别作为multipart/form-data表单的一个文本项 
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.MulitpartContentAttribute.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.MulitpartContentAttribute.DateTimeFormat">
            <summary>
            获取或设置时期时间格式
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartContentAttribute.#ctor">
            <summary>
            将参数值作为multipart/form-data表单或表单的一个项
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartContentAttribute.#ctor(System.String)">
            <summary>
            将参数值作为multipart/form-data表单或表单的一个项
            </summary>
            <param name="datetimeFormat">时期时间格式</param>
        </member>
        <member name="M:WebApiClient.Attributes.MulitpartContentAttribute.SetHttpContent(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
        </member>
        <member name="T:WebApiClient.Attributes.PathQueryAttribute">
            <summary>
            使用KeyValueFormatter序列化参数值得到的键值对作为url路径参数或query参数的特性
            没有任何特性修饰的参数，将默认被PathQueryAttribute修饰
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.PathQueryAttribute.encoding">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.PathQueryAttribute.Encoding">
            <summary>
            获取或设置参数的编码名称
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:WebApiClient.Attributes.PathQueryAttribute.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.PathQueryAttribute.DateTimeFormat">
            <summary>
            获取或设置时期时间格式
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.PathQueryAttribute.#ctor">
            <summary>
            表示Url路径参数或query参数的特性
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.PathQueryAttribute.#ctor(System.String)">
            <summary>
            表示Url路径参数或query参数的特性
            </summary>
            <param name="datetimeFormat">时期时间格式</param>
        </member>
        <member name="M:WebApiClient.Attributes.PathQueryAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.PathQueryAttribute.UsePathQuery(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            url添加query或替换segment
            </summary>
            <param name="uri">url</param>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.UrlAttribute">
            <summary>
            表示将参数值作为请求url的特性  
            要求必须修饰于第一个参数
            支持绝对或相对路径
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.UrlAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.XmlContentAttribute">
            <summary>
            使用XmlFormatter序列化参数值得到的json文本作为application/xml请求
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.XmlContentAttribute.encoding">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.XmlContentAttribute.Encoding">
            <summary>
            获取或设置编码名称
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.XmlContentAttribute.#ctor">
            <summary>
            将参数体值为application/xml请求      
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.XmlContentAttribute.#ctor(System.String)">
            <summary>
            将参数体作为application/xml请求
            </summary>
            <param name="encoding">编码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.XmlContentAttribute.SetHttpContent(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            设置参数到http请求内容
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
        </member>
        <member name="T:WebApiClient.Attributes.ApiReturnAttribute">
            <summary>
            回复内容处理特性抽象
            </summary>
        </member>
        <member name="P:WebApiClient.Attributes.ApiReturnAttribute.EnsureSuccessStatusCode">
            <summary>
            获取或设置是否确保响应的http状态码通过IsSuccessStatusCode验证
            当值为true时，请求可能会引发HttpStatusFailureException
            默认为true
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.ApiReturnAttribute.WebApiClient#IApiReturnAttribute#GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <exception cref="T:WebApiClient.HttpStatusFailureException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.ApiReturnAttribute.IsSuccessStatusCode(System.Net.HttpStatusCode)">
            <summary>
            指示状态码是否为成功的状态码
            </summary>
            <param name="statusCode">状态码</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.ApiReturnAttribute.GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.AutoReturnAttribute">
            <summary>
            自动适应返回类型的处理
            支持返回TaskOf(HttpResponseMessage)或TaskOf(byte[])或TaskOf(string)或TaskOf(Stream)
            支持返回xml或json转换对应类型
            没有任何IApiReturnAttribute特性修饰的接口方法，将默认为AutoReturn修饰
            </summary> 
        </member>
        <member name="F:WebApiClient.Attributes.AutoReturnAttribute.xmlReturn">
            <summary>
            xml解析
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.AutoReturnAttribute.jsonReturn">
            <summary>
            json解析
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.AutoReturnAttribute.GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.JsonReturnAttribute">
            <summary>
            使用JsonFormatter反序列化回复内容作为返回值
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.JsonReturnAttribute.GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.XmlReturnAttribute">
            <summary>
            使用XmlFormatter反序列化回复内容作为返回值
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.XmlReturnAttribute.GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Attributes.TagsAttribute">
            <summary>
            表示上下文Tags数据写入的特性
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.TagsAttribute.key">
            <summary>
            key
            </summary>
        </member>
        <member name="F:WebApiClient.Attributes.TagsAttribute.value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:WebApiClient.Attributes.TagsAttribute.#ctor(System.String)">
            <summary>
            请求前将参数值写入到上下文的Tags
            </summary>
            <param name="key">Tags的key</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.TagsAttribute.#ctor(System.String,System.Object)">
            <summary>
            请求前将指定的值写入到上下文的Tags
            </summary>
            <param name="key">Tags的key</param>
            <param name="value">固定的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Attributes.TagsAttribute.WebApiClient#IApiParameterAttribute#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            参数请求前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Attributes.TagsAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.AuthTokens.AuthTokenFilter">
            <summary>
            表示OAuth授权的token过滤器抽象类
            </summary>
        </member>
        <member name="F:WebApiClient.AuthTokens.AuthTokenFilter.token">
            <summary>
            最近请求到的token
            </summary>
        </member>
        <member name="F:WebApiClient.AuthTokens.AuthTokenFilter.asyncRoot">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.WebApiClient#IApiActionFilter#OnEndRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求完成之后
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.WebApiClient#IApiActionFilter#OnBeginRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            准备请求之前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.InitOrRefreshTokenAsync">
            <summary>
            初始化或刷新token
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.AccessTokenResult(WebApiClient.Contexts.ApiActionContext,WebApiClient.AuthTokens.TokenResult)">
            <summary>
            应用AccessToken
            默认为添加到请求头的Authorization
            </summary>
            <param name="context">请求上下文</param>
            <param name="tokenResult">token结果</param>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.RequestTokenResultAsync">
            <summary>
            请求获取token
            可以使用TokenClient来请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.AuthTokenFilter.RequestRefreshTokenAsync(System.String)">
            <summary>
            请求刷新token
            可以使用TokenClient来刷新
            </summary>
            <param name="refresh_token">获取token时返回的refresh_token</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.AuthTokens.TokenClient">
            <summary>
            表示提供token获取功能的客户端
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenClient.TokenEndpoint">
            <summary>
            获取提供Token获取的Url节点
            </summary>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.#ctor(System.String)">
            <summary>
            提供token获取功能的客户端
            </summary>
            <param name="tokenEndpoint">提供Token获取的Url节点</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.#ctor(System.Uri)">
            <summary>
            创建ITokenClient的实例
            </summary>
            <param name="tokenEndpoint">提供Token获取的Url节点</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.RequestClientCredentialsAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            以client_credentials授权方式获取token
            </summary>
            <param name="client_id">客户端id</param>
            <param name="client_secret">客户端秘钥</param>
            <param name="scope">资源范围</param>
            <param name="extra">额外字段，支持字典或模型</param>
            <returns></returns>     
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.RequestPasswordCredentialsAsync(System.String,System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            以password授权方式获取token
            </summary>
            <param name="client_id">客户端id</param>
            <param name="client_secret">客户端秘钥</param>
            <param name="username">用户名</param>
            <param name="password">用户密码</param>
            <param name="scope">资源范围</param>
            <param name="extra">额外字段，支持字典或模型</param>
            <returns></returns>      
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.RequestRefreshTokenAsync(System.String,System.String,System.String,System.Object)">
            <summary>
            刷新token
            </summary>
            <param name="client_id">客户端id</param>
            <param name="client_secret">客户端秘钥</param>
            <param name="refresh_token">获取token得到的refresh_token</param>
            <param name="extra">额外字段，支持字典或模型</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenClient.RequestTokenResultAsync(WebApiClient.AuthTokens.TokenClient.Credentials)">
            <summary>
            请求Token
            </summary>
            <param name="credentials">身份信息</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.AuthTokens.TokenClient.Credentials">
            <summary>
            身份信息
            </summary>
        </member>
        <member name="T:WebApiClient.AuthTokens.TokenResult">
            <summary>
            表示Token结果
            </summary>
        </member>
        <member name="F:WebApiClient.AuthTokens.TokenResult.createTime">
            <summary>
            token创建时间
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.AccessToken">
            <summary>
            access_token
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.IdToken">
            <summary>
            id_token
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.ExpiresIn">
            <summary>
            expires_in
            过期时间戳(秒)
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.TokenType">
            <summary>
            token_type
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.RefreshToken">
            <summary>
            refresh_token
            </summary>
        </member>
        <member name="P:WebApiClient.AuthTokens.TokenResult.Error">
            <summary>
            error
            </summary>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenResult.EnsureSuccess">
            <summary>
            确保token成功
            </summary>
            <exception cref="T:System.Net.Http.HttpRequestException"></exception>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenResult.IsSuccess">
            <summary>
            返回是否成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenResult.IsExpired">
            <summary>
            返回是否已过期 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AuthTokens.TokenResult.CanRefresh">
            <summary>
            返回token是否支持刷新
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Contexts.ApiActionContext">
            <summary>
            表示请求Api的上下文
            </summary>
        </member>
        <member name="F:WebApiClient.Contexts.ApiActionContext.tags">
            <summary>
            自定义数据的存储和访问容器
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.Tags">
            <summary>
            获取本次请求相关的自定义数据的存储和访问容器
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.HttpApiConfig">
            <summary>
            获取关联的HttpApiConfig
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.ApiActionDescriptor">
            <summary>
            获取关联的ApiActionDescriptor
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.RequestMessage">
            <summary>
            获取关联的HttpRequestMessage
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.ResponseMessage">
            <summary>
            获取关联的HttpResponseMessage
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.Result">
            <summary>
            获取调用Api得到的结果
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionContext.Exception">
            <summary>
            获取调用Api产生的异常
            </summary>
        </member>
        <member name="M:WebApiClient.Contexts.ApiActionContext.ExecuteActionAsync``1">
            <summary>
            执行Api方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Contexts.ApiActionContext.PrepareRequestAsync">
            <summary>
            准备请求数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Contexts.ApiActionContext.ExecRequestAsync">
            <summary>
            执行请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Contexts.ApiActionContext.ExecFiltersAsync(System.Func{WebApiClient.IApiActionFilter,System.Func{WebApiClient.Contexts.ApiActionContext,System.Threading.Tasks.Task}})">
            <summary>
            执行所有过滤器
            </summary>
            <param name="funcSelector">方法选择</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Contexts.ApiActionDescriptor">
            <summary>
            表示请求Api描述
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Name">
            <summary>
            获取Api名称
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Member">
            <summary>
            获取关联的方法信息
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Attributes">
            <summary>
            获取Api关联的特性
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Filters">
            <summary>
            获取Api关联的过滤器特性
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Parameters">
            <summary>
            获取Api的参数描述
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiActionDescriptor.Return">
            <summary>
            获取Api的返回描述
            </summary>
        </member>
        <member name="M:WebApiClient.Contexts.ApiActionDescriptor.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Contexts.ApiParameterDescriptor">
            <summary>
            表示请求Api的参数描述
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.Name">
            <summary>
            获取参数名称
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.Member">
            <summary>
            获取关联的参数信息
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.Index">
            <summary>
            获取参数索引
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.ParameterType">
            <summary>
            获取参数类型
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.Value">
            <summary>
            获取参数值
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.Attributes">
            <summary>
            获取关联的参数特性
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiParameterDescriptor.ValidationAttributes">
            <summary>
            获取关联的ValidationAttribute特性
            </summary>
        </member>
        <member name="M:WebApiClient.Contexts.ApiParameterDescriptor.ToString">
            <summary>
            值转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Contexts.ApiParameterDescriptor.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Contexts.ApiReturnDescriptor">
            <summary>
            表示请求Api的返回描述
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiReturnDescriptor.Attribute">
            <summary>
            获取关联的ApiReturnAttribute
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiReturnDescriptor.ReturnType">
            <summary>
            获取返回类型
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiReturnDescriptor.IsTaskDefinition">
            <summary>
            获取返回类型是否为定义为Task(Of T)
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiReturnDescriptor.IsITaskDefinition">
            <summary>
            获取返回类型是否为定义为ITask(Of T)
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.ApiReturnDescriptor.DataType">
            <summary>
            获取ITask(Of T)或Task(Of T)的T类型描述
            </summary>
        </member>
        <member name="T:WebApiClient.Contexts.DataTypeDescriptor">
            <summary>
            表示返回的Task(Of T)的T类型描述
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.DataTypeDescriptor.Type">
            <summary>
            获取类型
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.DataTypeDescriptor.IsHttpResponseWrapper">
            <summary>
            获取是否为HttpResponseWrapper子类型
            </summary>
        </member>
        <member name="P:WebApiClient.Contexts.DataTypeDescriptor.ITaskConstructor">
            <summary>
            获取包装为ITask的泛型构造器
            </summary>
        </member>
        <member name="M:WebApiClient.Contexts.DataTypeDescriptor.#ctor(System.Type)">
            <summary>
            返回的Task(Of T)的T类型描述
            </summary>
            <param name="dataType">数据类型</param>
        </member>
        <member name="T:WebApiClient.DataAnnotations.AliasAsAttribute">
            <summary>
            DataAnnotation
            表示将参数别名或序列时此属性的别名
            当修饰属性时默认适用于JsonFormat和KeyValueFormat
            </summary>
        </member>
        <member name="P:WebApiClient.DataAnnotations.AliasAsAttribute.Name">
            <summary>
            获取别名
            </summary>
        </member>
        <member name="M:WebApiClient.DataAnnotations.AliasAsAttribute.#ctor(System.String)">
            <summary>
            指定参数或属性的别名
            </summary>
            <param name="name">参数或属性的别名</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:WebApiClient.DataAnnotations.DataAnnotationAttribute">
            <summary>
            表示数据注解特性抽象
            </summary>
        </member>
        <member name="P:WebApiClient.DataAnnotations.DataAnnotationAttribute.Scope">
            <summary>
            获取或设置适用的序列化范围
            </summary>
        </member>
        <member name="M:WebApiClient.DataAnnotations.DataAnnotationAttribute.#ctor">
            <summary>
            数据注解特性抽象
            </summary>
        </member>
        <member name="M:WebApiClient.DataAnnotations.DataAnnotationAttribute.IsDefinedScope(WebApiClient.DataAnnotations.FormatScope)">
            <summary>
            返回是否声明指定的scope
            </summary>
            <param name="scope">序列化范围</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.DataAnnotations.DateTimeFormatAttribute">
            <summary>
            DataAnnotation
            表示序列时此属性使用的日期时间格式
            默认适用于JsonFormat和KeyValueFormat
            </summary>
        </member>
        <member name="P:WebApiClient.DataAnnotations.DateTimeFormatAttribute.Format">
            <summary>
            获取格式
            </summary>
        </member>
        <member name="M:WebApiClient.DataAnnotations.DateTimeFormatAttribute.#ctor(System.String)">
            <summary>
            日期时间格式
            </summary>
            <param name="format">格式</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:WebApiClient.DataAnnotations.FormatScope">
            <summary>
            表示适用的序列化的范围
            </summary>
        </member>
        <member name="F:WebApiClient.DataAnnotations.FormatScope.JsonFormat">
            <summary>
            适用于Json序列化
            </summary>
        </member>
        <member name="F:WebApiClient.DataAnnotations.FormatScope.KeyValueFormat">
            <summary>
            适用于KeyValue序列化
            </summary>
        </member>
        <member name="F:WebApiClient.DataAnnotations.FormatScope.All">
            <summary>
            适用于Json序列化和KeyValue序列化
            </summary>
        </member>
        <member name="T:WebApiClient.DataAnnotations.IgnoreSerializedAttribute">
            <summary>
            DataAnnotation
            表示序列时忽略此属性
            默认适用于JsonFormat和KeyValueFormat
            </summary>
        </member>
        <member name="T:WebApiClient.DataAnnotations.IgnoreWhenNullAttribute">
            <summary>
            DataAnnotation
            表示序列时属性值为null则忽略
            默认适用于KeyValueFormat
            </summary>
        </member>
        <member name="M:WebApiClient.DataAnnotations.IgnoreWhenNullAttribute.#ctor">
            <summary>
            值为null此属性将忽略
            默认适用于KeyValueFormat
            </summary>
        </member>
        <member name="T:WebApiClient.DateTimeFormats">
            <summary>
            提供一些日期时间格式模板
            </summary>
        </member>
        <member name="F:WebApiClient.DateTimeFormats.ISO8601_WithMillisecond">
            <summary>
            ISO8601精确到毫秒的日期时间格式
            </summary>
        </member>
        <member name="F:WebApiClient.DateTimeFormats.ISO8601_WithoutMillisecond">
            <summary>
            ISO8601精确到秒的日期时间格式
            </summary>
        </member>
        <member name="P:WebApiClient.DateTimeFormats.LocalDateTimeFormat">
            <summary>
            获取本地的日期时间格式
            ShortDate LongTime
            </summary>
        </member>
        <member name="T:WebApiClient.Defaults.ApiInterceptor">
            <summary>
            表示http接口调用的拦截器
            </summary>
        </member>
        <member name="P:WebApiClient.Defaults.ApiInterceptor.HttpApiConfig">
            <summary>
            获取相关的配置
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.ApiInterceptor.#ctor(WebApiClient.HttpApiConfig)">
            <summary>
            http接口调用的拦截器
            </summary>
            <param name="httpApiConfig">httpApi配置</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Defaults.ApiInterceptor.Intercept(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截方法的调用
            </summary>
            <param name="target">接口的实例</param>
            <param name="method">接口的方法</param>
            <param name="parameters">接口的参数集合</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.ApiInterceptor.GetApiActionDescriptor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            获取api的描述
            </summary>
            <param name="method">接口的方法</param>
            <param name="parameters">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.ApiInterceptor.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.Defaults.KeyValuePairConverter">
            <summary>
            表示KeyValuePair转换器
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairConverter.keyValuePairType">
            <summary>
            KeyValuePair泛型
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairConverter.useCamelCase">
            <summary>
            是否camel命名
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.#ctor(System.Boolean)">
            <summary>
            KeyValuePair转换器
            </summary>
            <param name="camelCase">是否使用CamelCase</param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            返回是否支持转换目标类型
            </summary>
            <param name="objectType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            从json解析得到对象
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            解析为json
            实际解析为KeyValuePair类型
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader">
            <summary>
            表示KeyValuePair读取器
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.keyGetter">
            <summary>
            key的getter
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.valueGetter">
            <summary>
            value的getter
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.#ctor(System.Type)">
            <summary>
            KeyValuePair读取器
            </summary>
            <param name="keyValuePairType">KeyValuePair的类型</param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.GetKey(System.Object)">
            <summary>
            返回实例的Key的值
            </summary>
            <param name="instance">实例</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.GetValue(System.Object)">
            <summary>
            返回实例的Value的值
            </summary>
            <param name="instance">实例</param>
            <returns></returns>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.readerCache">
            <summary>
            类型的KeyValuePairReader缓存
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairConverter.KeyValuePairReader.GetReader(System.Type)">
            <summary>
            从类型获取KeyValuePairReader
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Defaults.KeyValuePairWriter">
            <summary>
            表示KeyValuePair写入对象
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairWriter.properyName">
            <summary>
            当前属性名称
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairWriter.keyValues">
            <summary>
            保存KeyValuePair的列表
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.#ctor(System.String)">
            <summary>
            KeyValuePair写入对象
            </summary>
            <param name="name">对象名称</param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.AddStringItem(System.String)">
            <summary>
            转换为KeyValuePair并添加到列表
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.AddNullableItem``1(``0)">
            <summary>
            转换为KeyValuePair并添加到列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            写入属性
            </summary>
            <param name="name"></param>
            <param name="escape"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WritePropertyName(System.String)">
            <summary>
            写入属性
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Boolean)">
            <summary>
            写入bool
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            写入bool?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Byte)">
            <summary>
            写入byte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            写入byte?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Byte[])">
            <summary>
            写入byte[]
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Char)">
            <summary>
            写入char
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            写入char?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.DateTime)">
            <summary>
            写入DateTime
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            写入DateTime?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            写入DateTimeOffset
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            写入DateTimeOffset?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Decimal)">
            <summary>
            写入decimal
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            写入decimal?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Double)">
            <summary>
            写入double
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            写入double?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Single)">
            <summary>
            写入float
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            写入float?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Guid)">
            <summary>
            写入Guid
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            写入Guid?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Int32)">
            <summary>
            写入int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            写入int?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Int64)">
            <summary>
            写入long
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            写入long?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Object)">
            <summary>
            写入object
            使用基类自动分析类型
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.SByte)">
            <summary>
            写入sbyte
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            写入sbyte?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Int16)">
            <summary>
            写入short
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            写入short?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.String)">
            <summary>
            写入string
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.TimeSpan)">
            <summary>
            写入TimeSpan
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            写入TimeSpan?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.UInt32)">
            <summary>
            写入uint
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            写入uint?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.UInt64)">
            <summary>
            写入ulong
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            写入ulong
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Uri)">
            <summary>
            写入uri
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.UInt16)">
            <summary>
            写入ushort
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            写入ushort?
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.WriteNull">
            <summary>
            写入null值
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.ToString">
            <summary>
            转换为文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Defaults.KeyValuePairWriter.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValuePairWriter.DebugView.target">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValuePairWriter.DebugView.#ctor(WebApiClient.Defaults.KeyValuePairWriter)">
            <summary>
            调试视图
            </summary>
            <param name="target">查看的对象</param>
        </member>
        <member name="P:WebApiClient.Defaults.KeyValuePairWriter.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:WebApiClient.Defaults.PropertyContractResolver">
            <summary>
            表示属性解析约定
            用于实现DataAnnotations的功能
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.PropertyContractResolver.useCamelCase">
            <summary>
            是否camel命名
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.PropertyContractResolver.formatScope">
            <summary>
            序列化范围
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.PropertyContractResolver.#ctor(System.Boolean,WebApiClient.DataAnnotations.FormatScope)">
            <summary>
            属性解析器
            </summary>
            <param name="camelCase">是否camel命名</param>
            <param name="scope">序列化范围</param>
        </member>
        <member name="M:WebApiClient.Defaults.PropertyContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            字典Key的CamelCase
            </summary>
            <param name="dictionaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.PropertyContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>        
            创建属性
            </summary>
            <param name="member"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor">
            <summary>
            表示属性的描述
            </summary>
        </member>
        <member name="P:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor.AliasName">
            <summary>
            获取属性别名或名称
            </summary>
        </member>
        <member name="P:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor.DateTimeFormat">
            <summary>
            获取日期时间格式
            </summary>
        </member>
        <member name="P:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor.IgnoreSerialized">
            <summary>
            获取是否忽略序列化
            </summary>      
        </member>
        <member name="P:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor.IgnoreWhenNull">
            <summary>
            获取当值为null时是否忽略序列化
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.PropertyContractResolver.PropertyDescriptor.#ctor(WebApiClient.DataAnnotations.FormatScope,System.Reflection.MemberInfo)">
            <summary>
            属性的描述
            </summary>
            <param name="scope"></param>
            <param name="member"></param>
        </member>
        <member name="T:WebApiClient.Defaults.JsonFormatter">
            <summary>
            默认的json解析工具
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.JsonFormatter.useCamelCaseResolver">
            <summary>
            使用CamelCase的json属性解析约定
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.JsonFormatter.noCamelCaseResolver">
            <summary>
            不使用CamelCase的json属性解析约定
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.JsonFormatter.Serialize(System.Object,WebApiClient.FormatOptions)">
            <summary>
            将对象列化为json文本
            </summary>
            <param name="obj">对象</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.JsonFormatter.Deserialize(System.String,System.Type)">
            <summary>
            反序列化json为对象
            </summary>
            <param name="json">json</param>
            <param name="objType">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.JsonFormatter.CreateSerializerSettings(WebApiClient.FormatOptions)">
            <summary>
            创建序列化或反序列化配置       
            </summary>
            <param name="options">格式化选项</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Defaults.KeyValueFormatter">
            <summary>
            表示默认键值对列化工具
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValueFormatter.useCamelCaseResolver">
            <summary>
            使用CamelCase的KeyValue属性解析约定
            </summary>
        </member>
        <member name="F:WebApiClient.Defaults.KeyValueFormatter.noCamelCaseResolver">
            <summary>
            不使用CamelCase的KeyValue属性解析约定
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValueFormatter.Serialize(System.String,System.Object,WebApiClient.FormatOptions)">
            <summary>
            序列化对象为键值对
            </summary>
            <param name="name">对象名称</param>
            <param name="obj">对象实例</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValueFormatter.Serialize(WebApiClient.Contexts.ApiParameterDescriptor,WebApiClient.FormatOptions)">
            <summary>
            序列化参数为键值对
            </summary>
            <param name="parameter">参数</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.KeyValueFormatter.CreateSerializerSettings(WebApiClient.FormatOptions)">
            <summary>
            创建序列化配置     
            </summary>
            <param name="options">格式化选项</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Defaults.XmlFormatter">
            <summary>
            默认的Xml解析工具
            </summary>
        </member>
        <member name="M:WebApiClient.Defaults.XmlFormatter.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化为xml文本
            </summary>
            <param name="obj">对象</param>
            <param name="encoding">编码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Defaults.XmlFormatter.Deserialize(System.String,System.Type)">
            <summary>
            反序列化xml为对象
            </summary>
            <param name="xml">xml</param>
            <param name="objType">对象类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiReturnNotSupportedExteption">
            <summary>
            表示不支持处理的响应消息异常
            </summary>
        </member>
        <member name="P:WebApiClient.ApiReturnNotSupportedExteption.ResponseMessage">
            <summary>
            获取响应消息
            </summary>
        </member>
        <member name="P:WebApiClient.ApiReturnNotSupportedExteption.ReturnDataType">
            <summary>
            获取要转换的目标类型
            </summary>
        </member>
        <member name="P:WebApiClient.ApiReturnNotSupportedExteption.ContentType">
            <summary>
            获取响应内容的Content-Type
            </summary>
        </member>
        <member name="M:WebApiClient.ApiReturnNotSupportedExteption.#ctor(System.Net.Http.HttpResponseMessage,System.Type)">
            <summary>
            不支持处理的响应消息异常
            </summary>
            <param name="responseMessage">响应消息</param>
            <param name="returnDataType">反序列化的目标类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.ApiReturnNotSupportedExteption.GetErrorMessage(System.Net.Http.HttpResponseMessage,System.Type)">
            <summary>
            返回异常提示
            </summary>
            <param name="responseMessage">响应消息</param>
            <param name="returnDataType">反序列化的目标类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpApiConfigException">
            <summary>
            表示Http接口的特性配置异常
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfigException.#ctor(System.String)">
            <summary>
            Http接口特性配置异常
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="T:WebApiClient.HttpStatusFailureException">
            <summary>
            表示Http失败状态码异常
            </summary>
        </member>
        <member name="P:WebApiClient.HttpStatusFailureException.HttpApiConfig">
            <summary>
            获取Http接口的配置项
            </summary>
        </member>
        <member name="P:WebApiClient.HttpStatusFailureException.ResponseMessage">
            <summary>
            获取响应消息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpStatusFailureException.StatusCode">
            <summary>
            获取响应状态码
            </summary>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.#ctor(WebApiClient.HttpApiConfig,System.Net.Http.HttpResponseMessage)">
            <summary>
            Http失败状态码异常
            </summary>
            <param name="httpApiConfig">Http接口的配置项</param>
            <param name="responseMessage">响应消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.GetErrorMessage(System.Net.Http.HttpResponseMessage)">
            <summary>
            返回异常提示
            </summary>
            <param name="responseMessage">响应消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.ReadAsStringAsync">
            <summary>
            返回响应结果的String表述
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.ReadAsStreamAsync">
            <summary>
            返回响应结果的Stream表述
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.ReadAsByteArrayAsync">
            <summary>
            返回响应结果的byte[]表述
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpStatusFailureException.ReadAsAsync``1">
            <summary>
            根据ContentType自动选择json或xml将响应结果反序列化为TResult类型
            </summary>
            <typeparam name="TResult"></typeparam>
            <exception cref="T:WebApiClient.ApiReturnNotSupportedExteption"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ResultNotMatchException">
            <summary>
            表示结果不匹配异常
            </summary>
        </member>
        <member name="P:WebApiClient.ResultNotMatchException.Result">
            <summary>
            获取结果值
            </summary>
        </member>
        <member name="M:WebApiClient.ResultNotMatchException.#ctor(System.String,System.Object)">
            <summary>
            结果不匹配异常
            </summary>
            <param name="message">消息</param>
            <param name="result">结果值</param>
        </member>
        <member name="T:WebApiClient.RetryException">
            <summary>
            表示Http请求重试异常
            </summary>
        </member>
        <member name="M:WebApiClient.RetryException.#ctor(System.String)">
            <summary>
            重试异常
            </summary>
            <param name="message">提示</param>
        </member>
        <member name="M:WebApiClient.RetryException.#ctor(System.String,System.Exception)">
            <summary>
            重试异常
            </summary>
            <param name="message">提示</param>
            <param name="inner">内部异常</param>
        </member>
        <member name="T:WebApiClient.FormatOptions">
            <summary>
            表示格式化选项
            </summary>
        </member>
        <member name="F:WebApiClient.FormatOptions.dateTimeFormat">
            <summary>
            日期时间格式
            </summary>
        </member>
        <member name="P:WebApiClient.FormatOptions.UseCamelCase">
            <summary>
            获取或设置序列化时是否使用骆驼命名
            对于JsonFormatter将影响到属性的名称
            对于KeyValueFormatter将影响到Key的值
            默认为false
            </summary>
        </member>
        <member name="P:WebApiClient.FormatOptions.DateTimeFormat">
            <summary>
            获取或设置序列化DateTime类型使用的格式
            默认为本地日期时间格式
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.FormatOptions.#ctor">
            <summary>
            格式化选项
            </summary>
        </member>
        <member name="M:WebApiClient.FormatOptions.CloneChange(System.String)">
            <summary>
            当datetimeFormat不为null且有变化时
            则克隆并使用新的datetimeFormat
            </summary>
            <param name="datetimeFormat">日期时间格式</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.FormatOptions.FormatDateTime(System.Nullable{System.DateTime})">
            <summary>
            格式化时间为文本
            </summary>
            <param name="datetime">时间</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.FormatOptions.CamelCase(System.String)">
            <summary>
            骆驼命名
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.GlobalFilterCollection">
            <summary>
            表示全局过滤器的集合
            全局过滤器执行优先级最高，执行顺序为添加的顺序
            非线程安全类型
            </summary>
        </member>
        <member name="F:WebApiClient.GlobalFilterCollection.filters">
            <summary>
            保存数据的列表
            </summary>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.#ctor">
            <summary>
            全局过滤器的集合
            </summary>
        </member>
        <member name="P:WebApiClient.GlobalFilterCollection.Count">
            <summary>
            获取过滤器的数量
            </summary>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.Add(WebApiClient.IApiActionFilter)">
            <summary>
            添加全局过滤器
            </summary>
            <param name="item">全局过滤器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.Clear">
            <summary>
            清除所有全局过滤器
            </summary>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.Contains(WebApiClient.IApiActionFilter)">
            <summary>
            返回是否包含指定的全局过滤器
            </summary>
            <param name="item">全局过滤器</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.Remove(WebApiClient.IApiActionFilter)">
            <summary>
            删除指定的全局过滤器
            </summary>
            <param name="item">定的全局过滤器</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.GetEnumerator">
            <summary>
            返回过滤器的迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="P:WebApiClient.GlobalFilterCollection.System#Collections#Generic#ICollection{WebApiClient#IApiActionFilter}#IsReadOnly">
            <summary>
            获取是否是只读的
            </summary>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.System#Collections#Generic#ICollection{WebApiClient#IApiActionFilter}#CopyTo(WebApiClient.IApiActionFilter[],System.Int32)">
            <summary>
            复制到目前数组
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:WebApiClient.GlobalFilterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpApiClient">
            <summary>
            表示HttpApi客户端
            提供创建HttpApiClient实例的方法
            </summary>
            <summary>
            表示HttpApi客户端
            提供创建HttpApiClient实例的方法
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiClient.ApiInterceptor">
            <summary>
            获取Api拦截器
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiClient.#ctor(WebApiClient.IApiInterceptor)">
            <summary>
            http客户端的基类
            </summary>
            <param name="apiInterceptor">拦截器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.HttpApiClient.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiClient.DebugView.#ctor(WebApiClient.HttpApiClient)">
            <summary>
            调试视图
            </summary>
            <param name="target">查看的对象</param>
        </member>
        <member name="F:WebApiClient.HttpApiClient.connectionLimit">
            <summary>
            一个站点内的默认连接数限制
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClient.useSocketsHttpHandlerSwitch">
            <summary>
            使用SocketsHttpHandler开关项的名称
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiClient.UseSocketsHttpHandler">
            <summary>
            获取或设置HttpClientHandler是否包装和使用SocketsHttpHandler
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiClient.ConnectionLimit">
            <summary>
            获取或设置一个站点内的默认连接数限制
            这个值在初始化HttpClientHandler时使用
            默认值为128
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Create``1">
            <summary>
            创建实现了指定接口的HttpApiClient实例
            </summary>
            <typeparam name="TInterface">请求接口类型</typeparam>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Create``1(System.String)">
            <summary>
            创建实现了指定接口的HttpApiClient实例
            </summary>
            <typeparam name="TInterface">请求接口类型</typeparam>
            <param name="httpHost">Http服务完整主机域名，如http://www.webapiclient.com</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Create``1(WebApiClient.HttpApiConfig)">
            <summary>
            创建实现了指定接口的HttpApiClient实例
            </summary>
            <typeparam name="TInterface">请求接口类型</typeparam>
            <param name="httpApiConfig">接口配置</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Create(System.Type,WebApiClient.HttpApiConfig)">
            <summary>
            创建实现了指定接口的HttpApiClient实例
            </summary>
            <param name="interfaceType">请求接口类型</param>
            <param name="httpApiConfig">接口配置</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClient.Create(System.Type,WebApiClient.IApiInterceptor)">
            <summary>
            创建实现了指定接口的HttpApiClient实例
            </summary>
            <param name="interfaceType">请求接口类型</param>
            <param name="apiInterceptor">http接口调用拦截器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.TypeLoadException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpApiConfig">
            <summary>
            表示Http接口的配置项
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.DefaultXmlFormatter">
            <summary>
            获取默认xml格式化工具唯一实例
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.DefaultJsonFormatter">
            <summary>
            获取默认json格式化工具唯一实例
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.DefaultKeyValueFormatter">
            <summary>
            获取默认KeyValue格式化工具唯一实例
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.tags">
            <summary>
            自定义数据容器
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.httpHandler">
            <summary>
            与httpClient关联的IHttpHandler
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiConfig.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.Tags">
            <summary>
            获取配置的自定义数据的存储和访问容器
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.HttpHandler">
            <summary>
            获取与HttpClient关联的IHttpHandler
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.HttpClient">
            <summary>
            获取HttpClient实例
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.HttpHost">
            <summary>
            获取或设置Http服务完整主机域名
            例如http://www.webapiclient.com
            设置了HttpHost值，HttpHostAttribute将失效  
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.LoggerFactory">
            <summary>
            获取或设置统一日志工厂
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.UseParameterPropertyValidate">
            <summary>
            获取或设置是否对参数的属性值进行输入有效性验证
            默认为true
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.FormatOptions">
            <summary>
            获取或设置请求时序列化使用的默认格式   
            影响JsonFormatter或KeyValueFormatter的序列化
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.XmlFormatter">
            <summary>
            获取或设置Xml格式化工具
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.JsonFormatter">
            <summary>
            获取或设置Json格式化工具
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.KeyValueFormatter">
            <summary>
            获取或设置KeyValue格式化工具
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.GlobalFilters">
            <summary>
            获取全局过滤器集合
            非线程安全类型
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.#ctor">
            <summary>
            Http接口的配置项   
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Http接口的配置项   
            </summary>
            <param name="handler">HTTP消息处理程序</param>
            <param name="disposeHandler">用Dispose方法时，是否也Dispose handler</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Http接口的配置项
            </summary>
            <param name="httpClient">外部HttpClient实例</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.GetTagsSafeSync">
            <summary>
            以同步安全方式获取Tags实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.GetHttpHandlerSafeSync">
            <summary>
            以同步安全方式获取IHttpHandler实例
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <returns></returns>
        </member>
        <member name="P:WebApiClient.HttpApiConfig.IsDisposed">
            <summary>
            获取对象是否已释放
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.Dispose">
            <summary>
            关闭和释放所有相关资源
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiConfig.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">是否也释放托管资源</param>
        </member>
        <member name="T:WebApiClient.HttpApiFactory`1">
            <summary>
            表示HttpApi创建工厂
            提供HttpApi的配置注册和实例创建
            并对实例的生命周期进行自动管理
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.configAction">
            <summary>
            HttpApiConfig的配置委托
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.handlerFunc">
            <summary>
            HttpMessageHandler的创建委托
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.lifeTime">
            <summary>
            handler的生命周期
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.lifeTimeInterceptorLazy">
            <summary>
            具有生命周期的拦截器延时创建对象
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.interceptorCleaner">
            <summary>
            拦截器清理器
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.keepCookieContainer">
            <summary>
            是否保持cookie容器
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory`1.cookieContainer">
            <summary>
            cookie容器
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.#ctor">
            <summary>
            HttpApi创建工厂
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.SetLifetime(System.TimeSpan)">
            <summary>
            置HttpApi实例的生命周期
            </summary>
            <param name="lifeTime">生命周期</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.SetCleanupInterval(System.TimeSpan)">
            <summary>
            获取或设置清理过期的HttpApi实例的时间间隔
            </summary>
            <param name="interval">时间间隔</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.SetKeepCookieContainer(System.Boolean)">
            <summary>
            设置是否维护使用一个CookieContainer实例
            该实例为首次创建时的CookieContainer
            </summary>
            <param name="keep">true维护使用一个CookieContainer实例</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.ConfigureHttpMessageHandler(System.Func{System.Net.Http.HttpMessageHandler})">
            <summary>
            配置HttpMessageHandler的创建
            </summary>
            <param name="handlerFunc">创建委托</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.ConfigureHttpApiConfig(System.Action{WebApiClient.HttpApiConfig})">
            <summary>
            配置HttpApiConfig
            </summary>
            <param name="configAction">配置委托</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.CreateHttpApi">
            <summary>
            创建接口的代理实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.WebApiClient#IHttpApiFactory#CreateHttpApi">
            <summary>
            创建接口的代理实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.CreateInterceptor">
            <summary>
            创建LifetimeInterceptor
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory`1.OnInterceptorDeactivate(WebApiClient.LifetimeInterceptor)">
            <summary>
            当有拦截器失效时
            </summary>
            <param name="interceptor">拦截器</param>
        </member>
        <member name="T:WebApiClient.HttpApiFactory">
            <summary>
            表示HttpApi创建工厂表示操作
            提供HttpApi的配置注册和实例创建
            并对实例的生命周期进行自动管理
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiFactory.factories">
            <summary>
            工厂字典
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiFactory.#cctor">
            <summary>
            表示HttpApi创建工厂
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiFactory.Add``1">
            <summary>
            创建并返回指定接口的HttpApiFactory
            </summary>
            <typeparam name="TInterface"></typeparam>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiFactory.Create``1">
            <summary>
            创建指定接口的代理实例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <exception cref="T:System.InvalidOperationException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpApiRequestMessage">
            <summary>
            表示http api的请求消息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpApiRequestMessage.Timeout">
            <summary>
            获取或设置请求的超时时间
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="keyValue">参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding)">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="keyValue">参数</param>
            <param name="encoding">编码</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="keyValue">参数</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.Collections.Generic.KeyValuePair{System.String,System.String},System.Text.Encoding)">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="keyValue">参数</param>
            <param name="encoding">编码</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.String,System.String)">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddUrlQuery(System.String,System.String,System.Text.Encoding)">
            <summary>
            追加Query参数到请求路径
            </summary>
            <param name="key">参数名</param>
            <param name="value">参数值</param>
            <param name="encoding">编码</param>
            <exception cref="T:WebApiClient.HttpApiConfigException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddFormFieldAsync(System.String,System.String)">
            <summary>
            添加字段到已有的Content
            要求content-type为application/x-www-form-urlencoded
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddFormFieldAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            添加字段到已有的Content
            要求content-type为application/x-www-form-urlencoded
            </summary>
            <param name="keyValues">键值对</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddMulitpartFile(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            添加文件内容到已有的Content
            要求content-type为multipart/form-data
            </summary>
            <param name="stream">文件流</param>
            <param name="name">名称</param>
            <param name="fileName">文件名</param>
            <param name="contentType">文件Mime</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddMulitpartText(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            添加文本内容到已有的Content
            要求content-type为multipart/form-data
            </summary>     
            <param name="keyValues">键值对</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddMulitpartText(System.String,System.String)">
            <summary>
            添加文本内容到已有的Content
            要求content-type为multipart/form-data
            </summary>     
            <param name="name">名称</param>
            <param name="value">文本</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.AddMulitpartTextInternal(System.String,System.String)">
            <summary>
            添加文本内容到已有的Content
            要求content-type为multipart/form-data
            </summary>     
            <param name="name">名称</param>
            <param name="value">文本</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.CastToMultipartContent">
            <summary>
            转换为MultipartContent
            为null则返回MultipartContent的实例
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.EnsureMediaTypeEqual(System.String)">
            <summary>
            确保前后的mediaType一致
            </summary>
            <param name="newMediaType">新的MediaType</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.EnsureNotGetOrHead">
            <summary>
            确保不是Get或Head请求
            返回关联的HttpContent对象
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.ToString">
            <summary>
            转换为请求字符串
            只包括请求头，不包含请求体
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiRequestMessage.ToStringAsync">
            <summary>
            转换为请求字符串
            包含请求头和请求体
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpProxy">
            <summary>
            表示http代理信息
            </summary>
        </member>
        <member name="F:WebApiClient.HttpProxy.credentials">
            <summary>
            授权字段
            </summary>
        </member>
        <member name="P:WebApiClient.HttpProxy.Host">
            <summary>
            获取代理服务器域名或ip
            </summary>
        </member>
        <member name="P:WebApiClient.HttpProxy.Port">
            <summary>
            获取代理服务器端口
            </summary>
        </member>
        <member name="P:WebApiClient.HttpProxy.UserName">
            <summary>
            获取代理服务器账号
            </summary>
        </member>
        <member name="P:WebApiClient.HttpProxy.Password">
            <summary>
            获取代理服务器密码
            </summary>
        </member>
        <member name="P:WebApiClient.HttpProxy.System#Net#IWebProxy#Credentials">
            <summary>
            获取或设置授权信息
            </summary>
        </member>
        <member name="M:WebApiClient.HttpProxy.#ctor(System.String)">
            <summary>
            http代理信息
            </summary>
            <param name="proxyAddress">代理服务器地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:WebApiClient.HttpProxy.#ctor(System.Uri)">
            <summary>
            http代理信息
            </summary>
            <param name="proxyAddress">代理服务器地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpProxy.#ctor(System.String,System.Int32)">
            <summary>
            http代理信息
            </summary>
            <param name="host">代理服务器域名或ip</param>
            <param name="port">代理服务器端口</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpProxy.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            http代理信息
            </summary>
            <param name="host">代理服务器域名或ip</param>
            <param name="port">代理服务器端口</param>
            <param name="userName">代理服务器账号</param>
            <param name="password">代理服务器密码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpProxy.SetCredentialsByInterface(System.Net.ICredentials)">
            <summary>
            通过接口设置授权信息
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:WebApiClient.HttpProxy.ToTunnelRequestString(System.Uri)">
            <summary>
            转换Http Tunnel请求字符串
            </summary>      
            <param name="targetAddress">目标url地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.GetProxy(System.Uri)">
            <summary>
            获取代理服务器地址
            </summary>
            <param name="destination">目标地址</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.IsBypassed(System.Uri)">
            <summary>
            是否忽略代理
            </summary>
            <param name="host">目标地址</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.Equals(System.Object)">
            <summary>
            返回和obj是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.ToValidator">
            <summary>
            转换为代理验证器
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.FromWebProxy(System.Net.IWebProxy,System.Uri)">
            <summary>
            从IWebProxy实例转换获得
            </summary>
            <param name="webProxy">IWebProxy</param>
            <param name="targetAddress">目标url地址</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.Range(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            指定ip范围构建http代理服务
            </summary>
            <param name="start">代理服务器起始ip</param>
            <param name="port">代理服务器端口</param>
            <param name="count">ip数量</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.GetIPAddressRange(System.Net.IPAddress,System.Int32)">
            <summary>
            返回ip范围
            </summary>
            <param name="start">起始ip</param>
            <param name="count">ip数量</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.IPAddressToInt32(System.Net.IPAddress)">
            <summary>
            ip转换为int
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.Int32ToIPAddress(System.Int32)">
            <summary>
            int转换为ip
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpProxy.IsProxyEquals(System.Net.IWebProxy,System.Net.IWebProxy)">
            <summary>
            比较两个代理是否等效
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpRequestHeader">
            <summary>
            可以在客户端请求中指定的 HTTP 标头
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.CacheControl">
            <summary>
            Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Connection">
            <summary>
            Connection 标头，指定特定连接需要的选项
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Date">
            <summary>
            Date 标头，指定开始创建请求的日期和时间
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.KeepAlive">
            <summary>
            Keep-Alive 标头，指定用以维护持久性连接的参数
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Pragma">
            <summary>
             Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Trailer">
            <summary>
            Trailer 标头，指定标头字段显示在以 chunked 传输编码方式编码的消息的尾部
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.TransferEncoding">
            <summary>
            Transfer-Encoding 标头，指定对消息正文应用的转换的类型（如果有）
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Upgrade">
            <summary>
            Upgrade 标头，指定客户端支持的附加通信协议
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Via">
            <summary>
            Via 标头，指定网关和代理程序要使用的中间协议
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Warning">
            <summary>
            Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Allow">
            <summary>
            Allow 标头，指定支持的 HTTP 方法集
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentLength">
            <summary>
            Content-Length 标头，指定伴随正文数据的长度（以字节为单位）
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentType">
            <summary>
            Content-Type 标头，指定伴随正文数据的 MIME 类型
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentEncoding">
            <summary>
            Content-Encoding 标头，指定已应用于伴随正文数据的编码
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentLanguage">
            <summary>
            Content-Language 标头，指定伴随正文数据的自然语言
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentLocation">
            <summary>
            Content-Location 标头，指定可从其中获得伴随正文的 URI
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentMd5">
            <summary>
            Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ContentRange">
            <summary>
            Content-Range 标头，指定在完整正文中应用伴随部分正文数据的位置
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Expires">
            <summary>
             Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.LastModified">
            <summary>
            Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Accept">
            <summary>
            Accept 标头，指定响应可接受的 MIME 类型
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.AcceptCharset">
            <summary>
            Accept-Charset 标头，指定响应可接受的字符集
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.AcceptEncoding">
            <summary>
            Accept-Encoding 标头，指定响应可接受的内容编码
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.AcceptLanguage">
            <summary>
            Accept-Language 标头，指定响应首选的自然语言
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Authorization">
            <summary>
            Authorization 标头，指定客户端为向服务器验证自身身份而出示的凭据
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Cookie">
            <summary>
            Cookie 标头，指定向服务器提供的 Cookie 数据
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Expect">
            <summary>
            Expect 标头，指定客户端要求的特定服务器行为
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.From">
            <summary>
            From 标头，指定控制请求用户代理的用户的 Internet 电子邮件地址
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Host">
            <summary>
            Host 标头，指定所请求资源的主机名和端口号
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.IfMatch">
            <summary>
            If-Match 标头，指定仅当客户端的指示资源的缓存副本是最新的时，才执行请求的操作
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.IfModifiedSince">
            <summary>
            If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.IfNoneMatch">
            <summary>
            If-None-Match 标头，指定仅当客户端的指示资源的缓存副本都不是最新的时，才执行请求的操作
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.IfRange">
            <summary>
            If-Range 标头，指定如果客户端的缓存副本是最新的，仅发送指定范围的请求资源
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            If-Unmodified-Since 标头，指定仅当自指示的日期和时间之后修改了请求的资源时，才执行请求的操作
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.MaxForwards">
            <summary>
            Max-Forwards 标头，指定一个整数，表示此请求还可转发的次数
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.ProxyAuthorization">
            <summary>
            Proxy-Authorization 标头，指定客户端为向代理验证自身身份而出示的凭据
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Referer">
            <summary>
            Referer 标头，指定从中获得请求 URI 的资源的 URI
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Range">
            <summary>
            Range 标头，指定代替整个响应返回的客户端请求的响应的子范围
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Te">
            <summary>
            TE 标头，指定响应可接受的传输编码方式
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.Translate">
            <summary>
            Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展
            </summary>
        </member>
        <member name="F:WebApiClient.HttpRequestHeader.UserAgent">
            <summary>
            User-Agent 标头，指定有关客户端代理的信息
            </summary>
        </member>
        <member name="T:WebApiClient.HttpResponseFile">
            <summary>
            表示Http响应的文件
            可以声明为接口的返回类型
            </summary>
        </member>
        <member name="P:WebApiClient.HttpResponseFile.FileName">
            <summary>
            获取响应的友好文件名称
            </summary>
        </member>
        <member name="P:WebApiClient.HttpResponseFile.FileSize">
            <summary>
            获取文件的大小
            </summary>
        </member>
        <member name="P:WebApiClient.HttpResponseFile.MediaType">
            <summary>
            获取文件类型
            </summary>
        </member>
        <member name="M:WebApiClient.HttpResponseFile.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Http响应的文件
            </summary>
            <param name="response">响应消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.HttpResponseFile.SaveAsAsync(System.String)">
            <summary>
            保存到指定路径
            </summary>
            <param name="filePath">文件路径和文件名</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpResponseFile.SaveAsAsync(System.IO.Stream)">
            <summary>
            保存到目标流
            </summary>
            <param name="stream">流</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpResponseWrapper">
            <summary>
            表示http响应包装器抽象类
            其子类可以声明为接口的返回类型
            </summary>
        </member>
        <member name="P:WebApiClient.HttpResponseWrapper.HttpResponse">
            <summary>
            获取响应消息
            </summary>
        </member>
        <member name="M:WebApiClient.HttpResponseWrapper.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            http响应包装器抽象类
            </summary>
            <param name="httpResponse">响应消息</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:WebApiClient.IApiActionAttribute">
            <summary>
            定义ApiAction修饰特性的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IApiActionAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            执行前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IApiActionFilter">
            <summary>
            定义ApiAction过滤器的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IApiActionFilter.OnBeginRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            准备请求之前
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IApiActionFilter.OnEndRequestAsync(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            请求完成之后
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IApiActionFilterAttribute">
            <summary>
            定义ApiAction过滤器修饰特性的的行为
            </summary>
        </member>
        <member name="T:WebApiClient.IApiInterceptor">
            <summary>
            定义http接口拦截器的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IApiInterceptor.Intercept(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            拦截方法的调用
            </summary>
            <param name="target">接口的实例</param>
            <param name="method">接口的方法</param>
            <param name="parameters">接口的参数集合</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IApiParameterable">
            <summary>
            定义自身可以做为参数并进行相应处理的对象的行为
            此对象作为参数时，不需要特性修饰
            </summary>
        </member>
        <member name="M:WebApiClient.IApiParameterable.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IApiParameterAttribute">
            <summary>
            定义Api参数修饰特性的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IApiParameterAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IApiReturnAttribute">
            <summary>
            定义回复内容处理特性的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IApiReturnAttribute.GetTaskResult(WebApiClient.Contexts.ApiActionContext)">
            <summary>
            获取异步结果
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IAttributeMultiplable">
            <summary>
            定义特性是否允许在接口与方法上重复声明
            如果不允许则优先选取方法上的特性
            </summary>
        </member>
        <member name="P:WebApiClient.IAttributeMultiplable.OrderIndex">
            <summary>
            获取顺序排序的索引
            </summary>
        </member>
        <member name="P:WebApiClient.IAttributeMultiplable.AllowMultiple">
            <summary>
            获取本类型是否允许在接口与方法上重复
            </summary>
        </member>
        <member name="T:WebApiClient.IHandleTask`1">
            <summary>
            定义异常处理的行为
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:WebApiClient.IHandleTask`1.WhenCatch``1(System.Func{`0})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IHandleTask`1.WhenCatch``1(System.Func{``0,`0})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IHandleTask`1.WhenCatchAsync``1(System.Func{``0,System.Threading.Tasks.Task{`0}})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IHttpApi">
            <summary>
            定义HttpApi接口的基础接口
            要求所有HttpApi接口都继承此接口
            </summary>
        </member>
        <member name="T:WebApiClient.IHttpApiClient">
            <summary>
            定义HttpApiClient的接口
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpApiClient.ApiInterceptor">
            <summary>
            获取拦截器
            </summary>
        </member>
        <member name="T:WebApiClient.IHttpApiFactory`1">
            <summary>
            定义HttpApi工厂的接口
            </summary>
            <typeparam name="TInterface"></typeparam>
        </member>
        <member name="M:WebApiClient.IHttpApiFactory`1.CreateHttpApi">
            <summary>
            创建接口的代理实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IHttpHandler">
            <summary>
            定义HttpClient的处理程序的接口
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.SourceHanlder">
            <summary>
            获取原始的Handler对象
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.UseCookies">
            <summary>
            获取或设置是否使用CookieContainer来管理Cookies
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.SupportsRedirectConfiguration">
            <summary>
            获取是否支持重定向设置
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.SupportsProxy">
            <summary>
            获取是否支持代理
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.SupportsAutomaticDecompression">
            <summary>
            获取是否支持压缩传输
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.Proxy">
            <summary>
            获取或设置代理
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.PreAuthenticate">
            <summary>
            获取或设置是否对请求进行预身份验证
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.MaxAutomaticRedirections">
            <summary>
            获取或设置每个响应的最大重定向次数
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.MaxRequestContentBufferSize">
            <summary>
            获取或设置最大请求内容字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.Credentials">
            <summary>
            获取或设置凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.CookieContainer">
            <summary>
            获取或设置Cookie管理容器
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.ClientCertificateOptions">
            <summary>
            获取或设置客户端证书选项
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.AutomaticDecompression">
            <summary>
            获取或设置压缩方式
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.AllowAutoRedirect">
            <summary>
            获取或设置是否支持自动重定向
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.UseDefaultCredentials">
            <summary>
            获取或设置是否使用默认的凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.UseProxy">
            <summary>
            获取或设置是否使用代理
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.SslProtocols">
            <summary>
            获取或设置SSL版本
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.DefaultProxyCredentials">
            <summary>
            获取或设置默认代理凭证
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.CheckCertificateRevocationList">
            <summary>
            获取或设置是否验证撤销的证书
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.ClientCertificates">
            <summary>
            获取或设置证书列表
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.MaxConnectionsPerServer">
            <summary>
            获取或设置每个服务器的最大连接数
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.MaxResponseHeadersLength">
            <summary>
            获取或设置最大响应头的字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.IHttpHandler.ServerCertificateCustomValidationCallback">
            <summary>
            设置服务器证书验证委托
            </summary>
        </member>
        <member name="T:WebApiClient.IJsonFormatter">
            <summary>
            定义json序列化/反序列化的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IJsonFormatter.Serialize(System.Object,WebApiClient.FormatOptions)">
            <summary>
            将对象序列化为json文本
            </summary>
            <param name="obj">对象</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IJsonFormatter.Deserialize(System.String,System.Type)">
            <summary>
            将json文本反序列化对象
            </summary>
            <param name="json">json文本内容</param>
            <param name="objType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IKeyValueFormatter">
            <summary>
            定义将对象转换为键值对的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IKeyValueFormatter.Serialize(System.String,System.Object,WebApiClient.FormatOptions)">
            <summary>
            序列化对象为键值对
            </summary>
            <param name="name">对象名称</param>
            <param name="obj">对象实例</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IKeyValueFormatter.Serialize(WebApiClient.Contexts.ApiParameterDescriptor,WebApiClient.FormatOptions)">
            <summary>
            序列化参数为键值对
            </summary>
            <param name="parameter">参数</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IDateTimeFormatable">
            <summary>
            定义支持DateTimeFormat的配置
            </summary>
        </member>
        <member name="P:WebApiClient.IDateTimeFormatable.DateTimeFormat">
            <summary>
            获取或设置时期时间格式
            </summary>
        </member>
        <member name="T:WebApiClient.IEncodingable">
            <summary>
            定义支持Encoding的配置
            </summary>
        </member>
        <member name="P:WebApiClient.IEncodingable.Encoding">
            <summary>
            获取或设置参数的编码名称
            </summary>
        </member>
        <member name="T:WebApiClient.IIgnoreWhenNullable">
            <summary>
            定义支持IgnoreWhenNull的配置
            </summary>
        </member>
        <member name="P:WebApiClient.IIgnoreWhenNullable.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="T:WebApiClient.IIgnoreWhenNullableExtend">
            <summary>
            IIgnoreWhenNullable接口扩展
            </summary>
        </member>
        <member name="M:WebApiClient.IIgnoreWhenNullableExtend.IsIgnoreWith(WebApiClient.IIgnoreWhenNullable,System.Object)">
            <summary>
            返回相对value值，是否应该忽略
            </summary>
            <param name="able"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IIgnoreWhenNullableExtend.IsIgnoreWith(WebApiClient.IIgnoreWhenNullable,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            返回相对parameter的value值，是否应该忽略
            </summary>
            <param name="able"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiDescriptorCache">
            <summary>
            提供Api描述的缓存
            </summary>
        </member>
        <member name="F:WebApiClient.ApiDescriptorCache.cache">
            <summary>
            缓存字典
            </summary>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.#cctor">
            <summary>
            Api描述的缓存
            </summary>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.GetApiActionDescriptor(System.Reflection.MethodInfo)">
            <summary>
            从缓存获得ApiActionDescriptor
            使用缓存
            </summary>
            <param name="method">接口的方法</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.GetApiActionDescriptorNoCache(System.Reflection.MethodInfo)">
            <summary>
            从拦截内容获得ApiActionDescriptor
            </summary>
            <param name="method">接口的方法</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.GetParameterDescriptor(System.Reflection.ParameterInfo)">
            <summary>
            生成ApiParameterDescriptor
            </summary>
            <param name="parameter">参数信息</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.GetReturnDescriptor(System.Reflection.MethodInfo)">
            <summary>
            生成ApiReturnDescriptor
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection">
            <summary>
            表示参数特性集合
            </summary>
        </member>
        <member name="F:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.attribueList">
            <summary>
            特性列表
            </summary>
        </member>
        <member name="P:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.Count">
            <summary>
            获取元素数量
            </summary>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.#ctor(System.Collections.Generic.IEnumerable{WebApiClient.IApiParameterAttribute})">
            <summary>
            参数特性集合
            </summary>
            <param name="defined">声明的特性</param>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.Add(WebApiClient.IApiParameterAttribute)">
            <summary>
            添加新特性
            </summary>
            <param name="attribute"></param>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.AddIfNotExists(WebApiClient.IApiParameterAttribute)">
            <summary>
            添加新特性
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.ParameterAttributeCollection.ToArray">
            <summary>
            转换为数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiDescriptorCache.MultiplableComparer`1">
            <summary>
            是否允许重复的特性比较器
            </summary>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.MultiplableComparer`1.Equals(`0,`0)">
            <summary>
            是否相等
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiDescriptorCache.MultiplableComparer`1.GetHashCode(`0)">
            <summary>
            获取哈希码
            </summary>
            <param name="obj"></param>
            <returns></returns> 
        </member>
        <member name="T:WebApiClient.AsyncRoot">
            <summary>
            提供异步锁
            </summary>
        </member>
        <member name="F:WebApiClient.AsyncRoot.semaphoreSlim">
            <summary>
            信号量
            </summary>
        </member>
        <member name="M:WebApiClient.AsyncRoot.#ctor">
            <summary>
            异步锁
            </summary>
        </member>
        <member name="M:WebApiClient.AsyncRoot.#ctor(System.Int32)">
            <summary>
            异步锁
            </summary>
            <param name="concurrent">允许并行的线程数</param>
        </member>
        <member name="M:WebApiClient.AsyncRoot.Lock">
            <summary>
            锁住代码块
            using( asyncRoot.Lock() ){ }
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AsyncRoot.LockAsync">
            <summary>
            锁住代码块
            using( await asyncRoot.LockAsync() ){ }
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AsyncRoot.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.AsyncRoot.UnLocker">
            <summary>
            提供解锁
            </summary>
        </member>
        <member name="F:WebApiClient.AsyncRoot.UnLocker.semaphoreSlim">
            <summary>
            信号量
            </summary>
        </member>
        <member name="M:WebApiClient.AsyncRoot.UnLocker.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            解锁
            </summary>
            <param name="semaphoreSlim">信号量</param>
        </member>
        <member name="M:WebApiClient.AsyncRoot.UnLocker.Dispose">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:WebApiClient.AttributeExtend">
            <summary>
            成员特性扩展
            </summary>
        </member>
        <member name="M:WebApiClient.AttributeExtend.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员的特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member">成员</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AttributeExtend.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员的特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="member">成员</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AttributeExtend.GetAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            获取成员的特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="parameter">参数</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AttributeExtend.FindDeclaringAttribute``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            从方法或声明的类型中查找第一个特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method">方法</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.AttributeExtend.FindDeclaringAttributes``1(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            从方法和声明的类型中查找所有特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="method">方法</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ConcurrentCache`2">
            <summary>
            表示线程安全的内存缓存
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
        </member>
        <member name="F:WebApiClient.ConcurrentCache`2.dictionary">
            <summary>
            线程安全字典
            </summary>
        </member>
        <member name="M:WebApiClient.ConcurrentCache`2.#ctor">
            <summary>
            线程安全的内存缓存
            </summary>
        </member>
        <member name="M:WebApiClient.ConcurrentCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            线程安全的内存缓存
            </summary>
            <param name="comparer">键的比较器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.ConcurrentCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            获取或添加缓存
            </summary>
            <param name="key">键</param>
            <param name="valueFactory">生成缓存内容的委托</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ContentType">
            <summary>
            表示回复的ContentType
            </summary>
        </member>
        <member name="F:WebApiClient.ContentType.contentType">
            <summary>
            ContentType内容
            </summary>
        </member>
        <member name="M:WebApiClient.ContentType.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            回复的ContentType
            </summary>
            <param name="contentType">ContentType内容</param>
        </member>
        <member name="M:WebApiClient.ContentType.Is(System.String)">
            <summary>
            是否为某个Mime
            </summary>
            <param name="mediaType"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ContentType.IsApplicationJson">
            <summary>
            是否为json
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ContentType.IsApplicationXml">
            <summary>
            是否为xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpApiClientProxy">
            <summary>
            提供HttpApiClient代理类生成
            不支持泛型方法的接口
            不支持ref/out参数的接口
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClientProxy.interceptMethod">
            <summary>
            IApiInterceptor的Intercept方法
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClientProxy.baseConstructor">
            <summary>
            HttpApiClient的构造器
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClientProxy.proxyTypeCtorArgTypes">
            <summary>
            代理类型的构造器的参数类型
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClientProxy.hashCodeModuleBuilderCache">
            <summary>
            程序集HashCode^模块HashCode与模块创建器的缓存
            </summary>
        </member>
        <member name="F:WebApiClient.HttpApiClientProxy.proxyTypeCtorCache">
            <summary>
            接口类型与代理类型的构造器缓存
            </summary>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.CreateInstance(System.Type,WebApiClient.IApiInterceptor)">
            <summary>
            返回HttpApiClient代理类的实例
            </summary>
            <param name="interfaceType">接口类型</param>
            <param name="interceptor">拦截器</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.ImplementAsHttpApiClient(System.Type,System.Reflection.MethodInfo[])">
            <summary>
            继承HttpApiClient并实现接口
            并返回代理类的构造器
            对于相同的interfaceType，不允许并发执行
            </summary>
            <param name="interfaceType">接口类型</param>
            <param name="apiMethods">接口方法集合</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.BuildProxyType(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo[])">
            <summary>
            生成代理类型并实现相关方法
            并返回其构造器
            </summary>
            <param name="builder"></param>
            <param name="apiMethods">接口方法集合</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.BuildField(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            生成代理类型的字段
            </summary>
            <param name="typeBuilder">类型生成器</param>
            <param name="fieldName">字段名称</param>
            <param name="type">字段类型</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.BuildCtor(System.Reflection.Emit.TypeBuilder,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.FieldBuilder)">
            <summary>
            生成代理类型的构造器
            </summary>
            <param name="builder">类型生成器</param>
            <param name="fieldInterceptor">拦截器字段</param>
            <param name="fieldApiMethods">接口方法集合字段</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpApiClientProxy.BuildMethods(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo[],System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.FieldBuilder)">
            <summary>
            生成代理类型的接口实现方法
            </summary>
            <param name="builder">类型生成器</param>
            <param name="apiMethods">接口方法集合</param>
            <param name="fieldInterceptor">拦截器字段</param>
            <param name="fieldApiMethods">接口方法集合字段</param>
        </member>
        <member name="T:WebApiClient.IHttpApiFactory">
            <summary>
            定义HttpApiFactory的接口
            </summary>
        </member>
        <member name="M:WebApiClient.IHttpApiFactory.CreateHttpApi">
            <summary>
            创建接口的代理实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.InterceptorCleaner">
            <summary>
            表示拦截器清理器
            </summary>
        </member>
        <member name="F:WebApiClient.InterceptorCleaner.trackingEntryCount">
            <summary>
            当前监视生命周期的记录的数量
            </summary>
        </member>
        <member name="F:WebApiClient.InterceptorCleaner.trackingEntries">
            <summary>
            监视生命周期的记录队列
            </summary>
        </member>
        <member name="P:WebApiClient.InterceptorCleaner.CleanupInterval">
            <summary>
            获取或设置清理的时间间隔
            默认10s
            </summary>
        </member>
        <member name="M:WebApiClient.InterceptorCleaner.Add(WebApiClient.LifetimeInterceptor)">
            <summary>
            添加要清除的拦截器
            </summary>
            <param name="interceptor">拦截器</param>
        </member>
        <member name="M:WebApiClient.InterceptorCleaner.StartCleanup">
            <summary>
            启动清理作业
            </summary>
        </member>
        <member name="M:WebApiClient.InterceptorCleaner.Cleanup">
            <summary>
            清理失效的拦截器
            返回是否完全清理
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.InterceptorCleaner.TrackingEntry">
            <summary>
            表示监视生命周期的记录
            </summary>
        </member>
        <member name="F:WebApiClient.InterceptorCleaner.TrackingEntry.disposable">
            <summary>
            用于释放资源的对象
            </summary>
        </member>
        <member name="F:WebApiClient.InterceptorCleaner.TrackingEntry.weakReference">
            <summary>
            监视对象的弱引用
            </summary>
        </member>
        <member name="P:WebApiClient.InterceptorCleaner.TrackingEntry.CanDispose">
            <summary>
            获取是否可以释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.InterceptorCleaner.TrackingEntry.#ctor(WebApiClient.LifetimeInterceptor)">
            <summary>
            监视生命周期的记录
            </summary>
            <param name="interceptor">激活状态的拦截器</param>
        </member>
        <member name="M:WebApiClient.InterceptorCleaner.TrackingEntry.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.LifetimeInterceptor">
            <summary>
            表示具有生命周期的拦截器
            </summary>
        </member>
        <member name="F:WebApiClient.LifetimeInterceptor.tokenSource">
            <summary>
            Token取消源
            </summary>
        </member>
        <member name="M:WebApiClient.LifetimeInterceptor.#ctor(WebApiClient.HttpApiConfig,System.TimeSpan,System.Action{WebApiClient.LifetimeInterceptor})">
            <summary>
            具有生命周期的拦截器
            </summary>
            <param name="httpApiConfig">httpApi配置</param>
            <param name="lifeTime">拦截器的生命周期</param>
            <param name="deactivateAction">失效回调</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.LifetimeInterceptor.Dispose">
            <summary>
            这里不释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.JsonContent">
            <summary>
            表示http请求的json内容
            </summary>
        </member>
        <member name="P:WebApiClient.JsonContent.MediaType">
            <summary>
            获取对应的ContentType
            </summary>
        </member>
        <member name="M:WebApiClient.JsonContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            http请求的json内容
            </summary>
            <param name="json">json内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="T:WebApiClient.JsonPatchContent">
            <summary>
            表示http请求的JsonPatch内容
            </summary>
        </member>
        <member name="P:WebApiClient.JsonPatchContent.MediaType">
            <summary>
            获取对应的ContentType
            </summary>
        </member>
        <member name="M:WebApiClient.JsonPatchContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            http请求的JsonPatch内容
            </summary>
            <param name="json">json内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="T:WebApiClient.MulitpartFileContent">
            <summary>
            表示文件内容
            </summary>
        </member>
        <member name="M:WebApiClient.MulitpartFileContent.#ctor(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            文件内容
            </summary>
            <param name="stream">文件流</param>
            <param name="name">名称</param>
            <param name="fileName">文件名</param>
            <param name="contentType">文件Mime</param>
        </member>
        <member name="T:WebApiClient.MulitpartTextContent">
            <summary>
            表示文本内容
            </summary>
        </member>
        <member name="M:WebApiClient.MulitpartTextContent.#ctor(System.String,System.String)">
            <summary>
            文本内容
            </summary>     
            <param name="name">名称</param>
            <param name="value">文本</param>
        </member>
        <member name="T:WebApiClient.MultipartFormContent">
            <summary>
            表示form-data表单
            </summary>
        </member>
        <member name="P:WebApiClient.MultipartFormContent.MediaType">
            <summary>
            获取对应的ContentType
            </summary>
        </member>
        <member name="M:WebApiClient.MultipartFormContent.#ctor">
            <summary>
            form-data表单
            </summary>
        </member>
        <member name="M:WebApiClient.MultipartFormContent.#ctor(System.String)">
            <summary>
            form-data表单
            </summary>
            <param name="boundary">分隔符</param>
        </member>
        <member name="T:WebApiClient.UrlEncodedContent">
            <summary>
            表示键值对表单内容
            </summary>
        </member>
        <member name="P:WebApiClient.UrlEncodedContent.MediaType">
            <summary>
            获取对应的ContentType
            </summary>
        </member>
        <member name="F:WebApiClient.UrlEncodedContent.defaultHttpEncoding">
            <summary>
            默认的http编码
            </summary>
        </member>
        <member name="F:WebApiClient.UrlEncodedContent.stream">
            <summary>
            用于保存表单内容
            </summary>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.#ctor(System.Net.Http.HttpContent,System.Boolean)">
            <summary>
            键值对表单内容
            </summary>
            <param name="content">原始表单</param>
            <param name="disposeContent">是否要释放原始表单</param>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.AddFormFieldAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            添加字段到内存流
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.Encode(System.String)">
            <summary>
            表单编码
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.TryComputeLength(System.Int64@)">
            <summary>
            计算内容长度
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.CreateContentReadStreamAsync">
            <summary>
            创建只读流
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            序列化到目标流中
            </summary>
            <param name="stream">目标流</param>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.UrlEncodedContent.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:WebApiClient.XmlContent">
            <summary>
            表示http请求的xml内容
            </summary>
        </member>
        <member name="P:WebApiClient.XmlContent.MediaType">
            <summary>
            获取对应的ContentType
            </summary>
        </member>
        <member name="M:WebApiClient.XmlContent.#ctor(System.String,System.Text.Encoding)">
            <summary>
            http请求的xml内容
            </summary>
            <param name="xml">xml内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="T:WebApiClient.DefaultHttpClientHandler">
            <summary>
            默认的HttpClientHandler
            </summary>
        </member>
        <member name="M:WebApiClient.DefaultHttpClientHandler.#ctor">
            <summary>
            HttpClientHandler
            </summary>
        </member>
        <member name="T:WebApiClient.HttpHandlerOfHttpClientHandler">
            <summary>
            表示HttpClientHandler包装为IHttpClientHandler
            </summary>
        </member>
        <member name="F:WebApiClient.HttpHandlerOfHttpClientHandler.clientHandler">
            <summary>
            内部的HttpClientHandler
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.SourceHanlder">
            <summary>
            获取原始的Handler对象
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.UseCookies">
            <summary>
            获取或设置是否使用CookieContainer来管理Cookies
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.SupportsRedirectConfiguration">
            <summary>
            获取是否支持重定向设置
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.SupportsProxy">
            <summary>
            获取是否支持代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.SupportsAutomaticDecompression">
            <summary>
            获取是否支持压缩传输
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.Proxy">
            <summary>
            获取或设置代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.PreAuthenticate">
            <summary>
            获取或设置是否对请求进行预身份验证
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.MaxAutomaticRedirections">
            <summary>
            获取或设置每个响应的最大重定向次数
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.MaxRequestContentBufferSize">
            <summary>
            获取或设置最大请求内容字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.Credentials">
            <summary>
            获取或设置凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.CookieContainer">
            <summary>
            获取或设置Cookie管理容器
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.ClientCertificateOptions">
            <summary>
            获取或设置客户端证书选项
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.AutomaticDecompression">
            <summary>
            获取或设置压缩方式
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.AllowAutoRedirect">
            <summary>
            获取或设置是否支持自动重定向
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.UseDefaultCredentials">
            <summary>
            获取或设置是否使用默认的凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.UseProxy">
            <summary>
            获取或设置是否使用代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.SslProtocols">
            <summary>
            获取或设置SSL版本
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.DefaultProxyCredentials">
            <summary>
            获取或设置默认代理凭证
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.CheckCertificateRevocationList">
            <summary>
            获取或设置是否验证撤销的证书
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.ClientCertificates">
            <summary>
            获取或设置证书列表
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.MaxConnectionsPerServer">
            <summary>
            获取或设置每个服务器的最大连接数
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.MaxResponseHeadersLength">
            <summary>
            获取或设置最大响应头的字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfHttpClientHandler.ServerCertificateCustomValidationCallback">
            <summary>
            设置服务器证书验证委托
            </summary>
        </member>
        <member name="M:WebApiClient.HttpHandlerOfHttpClientHandler.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.HttpMessageHandler)">
            <summary>
            HttpClientHandler包装为IHttpClientHandler
            </summary>
            <param name="clientHandler">内部的clientHandler</param>
            <param name="sourceHandler">原始Handler</param>
        </member>
        <member name="M:WebApiClient.HttpHandlerOfHttpClientHandler.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.HttpHandlerOfSocketsHttpHandler">
            <summary>
            表示SocketsHttpHandler包装为IHttpClientHandler
            </summary>
        </member>
        <member name="F:WebApiClient.HttpHandlerOfSocketsHttpHandler.socketsHandler">
            <summary>
            内部的SocketsHttpHandler
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.SourceHanlder">
            <summary>
            获取原始的Handler对象
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.SupportsRedirectConfiguration">
            <summary>
            获取是否支持重定向设置
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.SupportsProxy">
            <summary>
            获取是否支持代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.SupportsAutomaticDecompression">
            <summary>
            获取是否支持压缩传输
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.MaxRequestContentBufferSize">
            <summary>
            获取或设置最大请求内容字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.ClientCertificateOptions">
            <summary>
            获取或设置客户端证书选项
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.UseDefaultCredentials">
            <summary>
            获取或设置是否使用默认的凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.UseCookies">
            <summary>
            获取或设置是否使用CookieContainer来管理Cookies
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.Proxy">
            <summary>
            获取或设置代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.PreAuthenticate">
            <summary>
            获取或设置是否对请求进行预身份验证
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.MaxAutomaticRedirections">
            <summary>
            获取或设置每个响应的最大重定向次数
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.Credentials">
            <summary>
            获取或设置凭证信息
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.CookieContainer">
            <summary>
            获取或设置Cookie管理容器
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.AutomaticDecompression">
            <summary>
            获取或设置压缩方式
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.AllowAutoRedirect">
            <summary>
            获取或设置是否支持自动重定向
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.UseProxy">
            <summary>
            获取或设置是否使用代理
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.SslProtocols">
            <summary>
            获取或设置SSL版本
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.DefaultProxyCredentials">
            <summary>
            获取或设置默认代理凭证
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.CheckCertificateRevocationList">
            <summary>
            获取或设置是否验证撤销的证书
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.ClientCertificates">
            <summary>
            获取或设置证书列表
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.MaxConnectionsPerServer">
            <summary>
            获取或设置每个服务器的最大连接数
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.MaxResponseHeadersLength">
            <summary>
            获取或设置最大响应头的字节长度
            </summary>
        </member>
        <member name="P:WebApiClient.HttpHandlerOfSocketsHttpHandler.ServerCertificateCustomValidationCallback">
            <summary>
            设置服务器证书验证委托
            </summary>
        </member>
        <member name="M:WebApiClient.HttpHandlerOfSocketsHttpHandler.#ctor(System.Net.Http.SocketsHttpHandler,System.Net.Http.HttpMessageHandler)">
            <summary>
            SocketsHttpHandler包装为IHttpClientHandler
            </summary>
            <param name="socketsHandler">内部的SocketsHttpHandler</param>
            <param name="sourceHandler">原始Handler</param>
        </member>
        <member name="M:WebApiClient.HttpHandlerOfSocketsHttpHandler.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:WebApiClient.HttpHandlerProvider">
            <summary>
            HttpHandler提供者
            </summary>
        </member>
        <member name="F:WebApiClient.HttpHandlerProvider.handlerGetFunc">
            <summary>
            HttpMessageInvoker的HttpMessageHandler字段获取委托
            </summary>
        </member>
        <member name="F:WebApiClient.HttpHandlerProvider.assemblyName">
            <summary>
            程序集版本信息
            </summary>
        </member>
        <member name="F:WebApiClient.HttpHandlerProvider.DefaultUserAgent">
            <summary>
            默认的UserAgent
            </summary>
        </member>
        <member name="M:WebApiClient.HttpHandlerProvider.#cctor">
            <summary>
            HttpHandler提供者
            </summary>
        </member>
        <member name="M:WebApiClient.HttpHandlerProvider.CreateHandler(System.Net.Http.HttpClient)">
            <summary>
            从HttpClient获得IHttpHandler
            </summary>
            <param name="httpClient">httpClient</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpHandlerProvider.CreateHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            从HttpMessageHandler获得IHttpHandler包装
            </summary>
            <param name="handler">HttpMessageHandler实例</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpHandlerProvider.CreateFrom(System.Net.Http.HttpMessageHandler,System.Net.Http.HttpMessageHandler)">
            <summary>
            获取HttpMessageHandler关联的HttpClientHandler或SocketsHttpHandler
            返回其IHttpHandler包装
            </summary>       
            <param name="innerHandler">当前Handler</param>
            <param name="sourceHandler">原始的Handler</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.HttpUtility">
            <summary>
            提供URL的编码功能
            </summary>
        </member>
        <member name="M:WebApiClient.HttpUtility.ParseCookie(System.String,System.Boolean)">
            <summary>
            解析cookie
            </summary>
            <param name="cookieValues">cookie值</param>
            <param name="useUrlEncode">是否对cookie的Value进行url utf-8编码</param>
            <exception cref="T:System.Net.CookieException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Url编码
            </summary>
            <param name="bytes">字节组</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.UrlEncodeCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Url编码
            </summary>
            <param name="bytes">字节组</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.ValidateUrlEncodingParameters(System.Byte[],System.Int32,System.Int32)">
            <summary>
            验证要编码的参数
            </summary>
            <param name="bytes"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.IntToHex(System.Int32)">
            <summary>
            int转换为16进制
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.HttpUtility.IsUrlSafeChar(System.Char)">
            <summary>
            返回是否为URL安全字符
            </summary>
            <param name="ch">字符</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Lambda">
            <summary>
            表示式委托
            </summary>
        </member>
        <member name="M:WebApiClient.Lambda.CreateSetAction``2(System.Reflection.PropertyInfo)">
            <summary>
            创建属性的设置委托
            </summary>
            <typeparam name="TDeclaring"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="property">属性</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Lambda.CreateGetFunc``2(System.Reflection.PropertyInfo)">
            <summary>
            创建属性的获取委托
            </summary>
            <typeparam name="TDeclaring"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="property">属性</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Lambda.CreateGetFunc``2(System.Type,System.String,System.Type)">
            <summary>
            创建属性的获取委托
            </summary>
            <typeparam name="TDeclaring"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="declaringType">实例的类型</param>
            <param name="propertyName">属性的名称</param>
            <param name="propertyType">属性的类型</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Lambda.CreateGetFunc``2(System.Reflection.FieldInfo)">
            <summary>
            创建字段的获取委托
            </summary>
            <typeparam name="TDeclaring"></typeparam>
            <typeparam name="TField"></typeparam>
            <param name="field">字段</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ParameterableAttribute">
            <summary>
            表示参数内容为IApiParameterable对象或其数组
            不可继承
            </summary>
        </member>
        <member name="M:WebApiClient.ParameterableAttribute.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ParameterableAttribute.GetApiParameterables(WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            从参数值获取IApiParameterable对象
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ParameterValidator">
            <summary>
            提供参数值和参数的属性值输入合法性验证
            </summary>
        </member>
        <member name="F:WebApiClient.ParameterValidator.cache">
            <summary>
            类型的属性否需要验证缓存
            </summary>
        </member>
        <member name="M:WebApiClient.ParameterValidator.IsNeedValidateProperty(System.Object)">
            <summary>
            返回是否需要进行属性验证
            </summary>
            <param name="instance">实例</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ParameterValidator.Validate(WebApiClient.Contexts.ApiParameterDescriptor,System.Boolean)">
            <summary>
            验证参数值输入合法性
            验证参数的属性值输入合法性
            </summary>
            <param name="parameter">参数描述</param>
            <param name="validateProperty">是否验证属性值</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="T:WebApiClient.RequestHeader">
            <summary>
            提供请求头枚举到名称的转换
            </summary>
        </member>
        <member name="F:WebApiClient.RequestHeader.httpRequestHeaderType">
            <summary>
            HttpRequestHeader的类型
            </summary>
        </member>
        <member name="F:WebApiClient.RequestHeader.cache">
            <summary>
            请求头枚举和名称的缓存
            </summary>
        </member>
        <member name="M:WebApiClient.RequestHeader.#cctor">
            <summary>
            请求头枚举到名称的转换
            </summary>
        </member>
        <member name="M:WebApiClient.RequestHeader.GetDisplayName(WebApiClient.HttpRequestHeader)">
            <summary>
            返回枚举的DisplayName
            </summary>
            <param name="header">请求头枚举</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RequestHeader.GetName(WebApiClient.HttpRequestHeader)">
            <summary>
            获取请求头名称
            </summary>
            <param name="header">请求头枚举</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.SocketExtend">
            <summary>
            Socket扩展
            </summary>
        </member>
        <member name="M:WebApiClient.SocketExtend.ConnectTaskAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Nullable{System.TimeSpan})">
            <summary>
            异步连接
            </summary>
            <param name="socket">socket</param>
            <param name="remoteEndPoint">远程终结点</param>
            <param name="timeout">连接的超时时间</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.SocketExtend.SendTaskAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Nullable{System.TimeSpan})">
            <summary>
            异步发送
            </summary>
            <param name="socket"></param>
            <param name="arraySegment">缓冲区</param>
            <param name="timeout">等待数据的超时时间</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.SocketExtend.ReceiveTaskAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Nullable{System.TimeSpan})">
            <summary>
            异步接收
            </summary>
            <param name="socket"></param>
            <param name="arraySegment">缓冲区</param>
            <param name="timeout">等待数据的超时时间</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.SocketExtend.TaskSetter`1">
            <summary>
            表示任务行为
            </summary>
            <typeparam name="TResult">任务结果类型</typeparam>
        </member>
        <member name="F:WebApiClient.SocketExtend.TaskSetter`1.tokenSource">
            <summary>
            取消源
            </summary>
        </member>
        <member name="F:WebApiClient.SocketExtend.TaskSetter`1.taskSource">
            <summary>
            任务源
            </summary>
        </member>
        <member name="P:WebApiClient.SocketExtend.TaskSetter`1.Task">
            <summary>
            获取任务对象
            </summary>
        </member>
        <member name="M:WebApiClient.SocketExtend.TaskSetter`1.#ctor(System.Nullable{System.TimeSpan})">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="M:WebApiClient.SocketExtend.TaskSetter`1.SetResult(`0)">
            <summary>
            设置任务的行为结果
            </summary>     
            <param name="value">数据值</param>   
            <returns></returns>
        </member>
        <member name="M:WebApiClient.SocketExtend.TaskSetter`1.SetException(System.Exception)">
            <summary>
            设置设置为异常
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiHandleTask`1">
            <summary>
            提供异常处理的请求任务
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:WebApiClient.ApiHandleTask`1.invoker">
            <summary>
            请求任务创建的委托
            </summary>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            异常处理的请求任务
            </summary>
            <param name="invoker">请求任务创建的委托</param>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.GetAwaiter">
            <summary>
            执行InvokeAsync
            并返回其TaskAwaiter对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            配置用于等待的等待者
            </summary>
            <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.WebApiClient#ITask#InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.WhenCatch``1(System.Func{`0})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.WhenCatch``1(System.Func{``0,`0})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiHandleTask`1.WhenCatchAsync``1(System.Func{``0,System.Threading.Tasks.Task{`0}})">
            <summary>
            当捕获到异常时返回指定结果
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="func">获取结果</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiRetryTask`1">
            <summary>
            表示支持重试的Api请求任务
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
        </member>
        <member name="F:WebApiClient.ApiRetryTask`1.invoker">
            <summary>
            请求任务创建的委托
            </summary>
        </member>
        <member name="F:WebApiClient.ApiRetryTask`1.retryMaxCount">
            <summary>
            获取最大重试次数
            </summary>
        </member>
        <member name="F:WebApiClient.ApiRetryTask`1.retryDelay">
            <summary>
            获取各次重试的延时时间
            </summary>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Int32,System.Func{System.Int32,System.TimeSpan})">
            <summary>
            支持重试的Api请求任务
            </summary>
            <param name="invoker">请求任务创建的委托</param>
            <param name="retryMaxCount">最大尝试次数</param>
            <param name="retryDelay">各次重试的延时时间</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.GetAwaiter">
            <summary>
            执行InvokeAsync
            并返回其TaskAwaiter对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            配置用于等待的等待者
            </summary>
            <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.WebApiClient#ITask#InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.DelayBeforRetry(System.Int32)">
            <summary>
            执行前延时
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.WhenCatch``1">
            <summary>
            当捕获到异常时进行Retry
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.WhenCatch``1(System.Func{``0,System.Boolean})">
            <summary>
            当捕获到异常时进行Retry
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="predicate">返回true才Retry</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.WhenResult(System.Func{`0,System.Boolean})">
            <summary>
            当结果符合条件时进行Retry
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiRetryTask`1.RetryMarkException">
            <summary>
            表示重试标记的异常
            </summary>
        </member>
        <member name="M:WebApiClient.ApiRetryTask`1.RetryMarkException.#ctor(System.Exception)">
            <summary>
            重试标记的异常
            </summary>
            <param name="inner">内部异常</param>
        </member>
        <member name="T:WebApiClient.ApiTask">
            <summary>
            提供ApiTask的创建
            </summary>
        </member>
        <member name="F:WebApiClient.ApiTask.CompletedTask">
            <summary>
            完成的任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.GetITaskConstructor(System.Type)">
            <summary>
            获取ITaskOf(dataType)的构造器
            </summary>
            <param name="dataType">泛型参数类型</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.CreateInstance(WebApiClient.HttpApiConfig,WebApiClient.Contexts.ApiActionDescriptor)">
            <summary>
            创建ApiTaskOf(T)的实例
            </summary>
            <param name="httpApiConfig">http接口配置</param>
            <param name="apiActionDescriptor">api描述</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.InvokeAsync">
            <summary>
            创建请求任务
            返回请求结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ApiTask.ApiTaskOf`1">
            <summary>
            表示Api请求的异步任务
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
        </member>
        <member name="F:WebApiClient.ApiTask.ApiTaskOf`1.httpApiConfig">
            <summary>
            http接口配置
            </summary>
        </member>
        <member name="F:WebApiClient.ApiTask.ApiTaskOf`1.apiActionDescriptor">
            <summary>
            api描述
            </summary>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.#ctor(WebApiClient.HttpApiConfig,WebApiClient.Contexts.ApiActionDescriptor)">
            <summary>
            Api请求的异步任务
            </summary>
            <param name="httpApiConfig">http接口配置</param>
            <param name="apiActionDescriptor">api描述</param>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.GetAwaiter">
            <summary>
            执行InvokeAsync
            并返回其TaskAwaiter对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.ConfigureAwait(System.Boolean)">
            <summary>
            配置用于等待的等待者
            </summary>
            <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.WebApiClient#ITask{TResult}#InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ApiTask.ApiTaskOf`1.RequestAsync">
            <summary>
            执行一次请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.TaskObservable`1">
            <summary>
            表示任务的Rx
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.observerTable">
            <summary>
            观察者列表
            </summary>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            任务的Rx
            </summary>
            <param name="task">任务</param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.OnTaskCompleted(System.Threading.Tasks.Task{`0})">
            <summary>
            任务完成时
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.RaiseObserver(System.IObserver{`0},System.Threading.Tasks.Task{`0})">
            <summary>
            响应观察者
            </summary>
            <param name="observer"></param>
            <param name="t"></param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.Subscribe(System.Action{`0},System.Action{System.Exception})">
            <summary>
            订阅
            </summary>
            <param name="onResult">收到结果委托</param>
            <param name="onError">遇到错误委托</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            订阅
            </summary>
            <param name="observer">观察者</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.TaskObservable`1.ObserverTable`1">
            <summary>
            表示观察者列表
            线程安全类型 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.ObserverTable`1.raised">
            <summary>
            是否触发过
            </summary>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.ObserverTable`1.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.ObserverTable`1.observers">
            <summary>
            观察者列表
            </summary>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.ObserverTable`1.Add(System.IObserver{`1})">
            <summary>
            添加观察者
            如果已触发任务完成，则返回false
            </summary>
            <param name="observer">观察者</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.ObserverTable`1.Remove(System.IObserver{`1})">
            <summary>
            移除观察者
            </summary>
            <param name="observer">观察者</param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.ObserverTable`1.RaiseNextAndCompleted(`1)">
            <summary>
            触发有结果值到所有观察者
            </summary>
            <param name="value">结果值</param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.ObserverTable`1.RaiseErrorAndCompleted(System.Exception)">
            <summary>
            触发有异常到所有观察者
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="T:WebApiClient.TaskObservable`1.Unsubscriber`1">
            <summary>
            表示订阅取消器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.Unsubscriber`1.onUnsubscribe">
            <summary>
            取消委托
            </summary>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.Unsubscriber`1.#ctor(System.Action)">
            <summary>
            订阅取消器
            </summary>
            <param name="onUnsubscribe">取消委托</param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.Unsubscriber`1.Dispose">
            <summary>
            取消订阅
            </summary>
        </member>
        <member name="T:WebApiClient.TaskObservable`1.TaskObserver`1">
            <summary>
            表示任务的观察者
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.TaskObserver`1.onNext">
            <summary>
            有值更新委托
            </summary>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.TaskObserver`1.onError">
            <summary>
            错误委托
            </summary>
        </member>
        <member name="F:WebApiClient.TaskObservable`1.TaskObserver`1.onCompleted">
            <summary>
            完成委托
            </summary>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.TaskObserver`1.#ctor(System.Action{`1},System.Action{System.Exception},System.Action)">
            <summary>
            任务的观察者
            </summary>
            <param name="onNext">有值更新委托</param>
            <param name="onError">错误委托</param>
            <param name="onCompleted">完成委托</param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.TaskObserver`1.OnCompleted">
            <summary>
            完成触发
            </summary>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.TaskObserver`1.OnError(System.Exception)">
            <summary>
            错误触发
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:WebApiClient.TaskObservable`1.TaskObserver`1.OnNext(`1)">
            <summary>
            有值更新触发
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:WebApiClient.TypeExtend">
            <summary>
            类型扩展
            </summary>
        </member>
        <member name="F:WebApiClient.TypeExtend.interfaceMethodsCache">
            <summary>
            接口的方法缓存
            </summary>
        </member>
        <member name="F:WebApiClient.TypeExtend.typeAllowMultipleCache">
            <summary>
            类型是否AllowMultiple的缓存
            </summary>
        </member>
        <member name="M:WebApiClient.TypeExtend.GetAllApiMethods(System.Type)">
            <summary>
            获取接口类型及其继承的接口的所有方法
            忽略HttpApiClient类型的所有接口的方法
            </summary>
            <param name="interfaceType">接口类型</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.GetAllApiMethodsNoCache(System.Type)">
            <summary>
            获取接口类型及其继承的接口的所有方法
            忽略HttpApiClient类型的所有接口的方法
            </summary>
            <param name="interfaceType">接口类型</param> 
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.EnsureApiMethod(System.Reflection.MethodInfo)">
            <summary>
            确保方法是支持的Api接口
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.GetTypeInfo(System.Type)">
            <summary>
            返回type的详细类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.AsType(System.Type)">
            <summary>
            转换为Type类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.IsInheritFrom``1(System.Type)">
            <summary>
            是否可以从TBase类型派生
            </summary>
            <typeparam name="TBase"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.IsAllowMultiple(System.Type)">
            <summary>
            关联的AttributeUsageAttribute是否AllowMultiple
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.IsDefinedFormatScope``1(System.Reflection.MemberInfo,WebApiClient.DataAnnotations.FormatScope)">
            <summary>
            返回特性是否声明指定的FormatScope
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            返回方法的完整名称
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TypeExtend.GetName(System.Type)">
            <summary>
            返回类型不含namespace的名称
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.UriEditor">
            <summary>
            表示Uri编辑器
            </summary>
        </member>
        <member name="F:WebApiClient.UriEditor._uri">
            <summary>
            当前的Uri
            </summary>
        </member>
        <member name="F:WebApiClient.UriEditor.uriCanReplace">
            <summary>
            当前的Uri是否可替换值
            </summary>
        </member>
        <member name="P:WebApiClient.UriEditor.Uri">
            <summary>
            获取当前的Uri
            </summary>
        </member>
        <member name="P:WebApiClient.UriEditor.Encoding">
            <summary>
            获取Uri参数的编码
            </summary>
        </member>
        <member name="M:WebApiClient.UriEditor.#ctor(System.Uri)">
            <summary>
            Uri编辑器
            </summary>
            <param name="uri">绝对路径的uri</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:WebApiClient.UriEditor.#ctor(System.Uri,System.Text.Encoding)">
            <summary>
            Url创建者
            </summary>
            <param name="uri">绝对路径的uri</param>
            <param name="encoding">参数的编码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
        </member>
        <member name="M:WebApiClient.UriEditor.Replace(System.String,System.String)">
            <summary>
            替换带有花括号的参数的值
            </summary>
            <param name="name">参数名称，不带花括号</param>
            <param name="value">参数的值</param>
            <returns>替换成功则返回true</returns>
        </member>
        <member name="M:WebApiClient.UriEditor.AddQuery(System.String,System.String)">
            <summary>
            添加参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.UriEditor.SetPath(System.String)">
            <summary>
            设置Path
            </summary>
            <param name="path">新路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.UriEditor.SetPath(System.Func{System.String,System.String})">
            <summary>
            设置Path
            </summary>
            <param name="path">新路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:WebApiClient.UriEditor.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IRetryTask`1">
            <summary>
            定义重试的行为
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:WebApiClient.IRetryTask`1.WhenCatch``1">
            <summary>
            当捕获到异常时进行Retry
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IRetryTask`1.WhenCatch``1(System.Func{``0,System.Boolean})">
            <summary>
            当捕获到异常时进行Retry
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="predicate">返回true才Retry</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IRetryTask`1.WhenResult(System.Func{`0,System.Boolean})">
            <summary>
            当结果符合条件时进行Retry
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ITask">
            <summary>
            定义返回结果的行为
            </summary>
        </member>
        <member name="M:WebApiClient.ITask.InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ITask`1">
            <summary>
            定义返回结果的行为
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:WebApiClient.ITask`1.InvokeAsync">
            <summary>
            创建请求任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ITask`1.GetAwaiter">
            <summary>
            调用InvokeAsync
            并返回其TaskAwaiter对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ITask`1.ConfigureAwait(System.Boolean)">
            <summary>
            配置用于等待的等待者
            </summary>
            <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ITaskObservable`1">
            <summary>
            定义支持观察的任务的行为
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:WebApiClient.ITaskObservable`1.Subscribe(System.Action{`0},System.Action{System.Exception})">
            <summary>
            订阅
            </summary>
            <param name="onResult">收到结果委托</param>
            <param name="onError">遇到错误委托</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.IXmlFormatter">
            <summary>
            定义xml序列化/反序列化的行为
            </summary>
        </member>
        <member name="M:WebApiClient.IXmlFormatter.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化为xml文本
            </summary>
            <param name="obj">对象</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.IXmlFormatter.Deserialize(System.String,System.Type)">
            <summary>
            将xml文本反序列化对象
            </summary>
            <param name="xml">xml文本内容</param>
            <param name="objType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ObservableExtend">
            <summary>
            Rx扩展
            </summary>
        </member>
        <member name="M:WebApiClient.ObservableExtend.ToObservable``1(WebApiClient.ITask{``0})">
            <summary>
            转换为ITaskObservable对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ObservableExtend.ToObservable``1(System.Threading.Tasks.Task{``0})">
            <summary>
            转换为ITaskObservable对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.Authorization">
            <summary>
            表示将自身作为请求的授权
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.Authorization.Scheme">
            <summary>
            体系
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.Authorization.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.Authorization.#ctor(System.String,System.String)">
            <summary>
            授权信息
            </summary>
            <param name="scheme">体系</param>
            <param name="parameter">参数</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.Authorization.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            执行请求前
            </summary>
            <param name="context"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.Authorization.GetAuthorizationValue">
            <summary>
            返回授权信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.Authorization.ToString">
            <summary>
            转换为文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.Authorization.ToAuthenticationHeaderValue">
            <summary>
            转换为AuthenticationHeaderValue类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.BasicAuth">
            <summary>
            表示将自身作为请求的基本授权
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.BasicAuth.#ctor(System.String,System.String)">
            <summary>
            基本授权
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.BasicAuth.GetParameter(System.String,System.String)">
            <summary>
            获取基础认证的参数
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.BearerToken">
            <summary>
            表示将自身作为请求的Bearer体系授权
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.BearerToken.#ctor(System.String)">
            <summary>
            Bearer体系授权信息
            </summary>
            <param name="token">令牌</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:WebApiClient.Parameterables.FormField">
            <summary>
            表示将自身作为x-www-form-urlencoded的字段
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.FormField.stringValue">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.FormField.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.#ctor(System.Object)">
            <summary>
            将自身作为x-www-form-urlencoded的字段
            </summary>     
            <param name="value">文本内容</param>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.#ctor(System.String)">
            <summary>
            x-www-form-urlencoded的字段
            如果有[FormContent]的参数，FormField需要放在其后
            </summary>     
            <param name="value">文本内容</param>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.WebApiClient#IApiParameterable#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.String)~WebApiClient.Parameterables.FormField">
            <summary>
            从string类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Int32)~WebApiClient.Parameterables.FormField">
            <summary>
            从int类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Nullable{System.Int32})~WebApiClient.Parameterables.FormField">
            <summary>
            从int?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Decimal)~WebApiClient.Parameterables.FormField">
            <summary>
            从decimal类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Nullable{System.Decimal})~WebApiClient.Parameterables.FormField">
            <summary>
            从decimal?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Single)~WebApiClient.Parameterables.FormField">
            <summary>
            从float类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Nullable{System.Single})~WebApiClient.Parameterables.FormField">
            <summary>
            从float?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Double)~WebApiClient.Parameterables.FormField">
            <summary>
            从double类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Nullable{System.Double})~WebApiClient.Parameterables.FormField">
            <summary>
            从double?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.DateTime)~WebApiClient.Parameterables.FormField">
            <summary>
            从DateTime类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.FormField.op_Implicit(System.Nullable{System.DateTime})~WebApiClient.Parameterables.FormField">
            <summary>
            从DateTime?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.JsonPatchDocument">
            <summary>
            表示将自身作为JsonPatch请求内容
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument.patchMethod">
            <summary>
            表示patch请求方式
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument.oprations">
            <summary>
            操作列表
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument.Add(System.String,System.Object)">
            <summary>
            Add操作
            </summary>
            <param name="path">json路径</param>
            <param name="value">值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument.Remove(System.String)">
            <summary>
            Remove操作
            </summary>
            <param name="path">json路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument.Replace(System.String,System.Object)">
            <summary>
            Replace操作
            </summary>
            <param name="path">json路径</param>
            <param name="value">替换后的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument.WebApiClient#IApiParameterable#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            执行请求前
            </summary>
            <param name="context"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.JsonPatchDocument.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument.DebugView.target">
            <summary>
            调试的目标
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument.DebugView.#ctor(WebApiClient.Parameterables.JsonPatchDocument)">
            <summary>
            调试视图
            </summary>
            <param name="target">查看的对象</param>
        </member>
        <member name="P:WebApiClient.Parameterables.JsonPatchDocument.DebugView.Oprations">
            <summary>
            查看的内容
            </summary>
        </member>
        <member name="T:WebApiClient.Parameterables.JsonPatchDocument`1">
            <summary>
            表示将自身作为JsonPatch请求内容
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument`1.camelCase">
            <summary>
            属性名称是否使用骆驼命名
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.#ctor(System.Boolean)">
            <summary>
            将自身作为JsonPatch请求内容
            </summary>
            <param name="camelCase">属性名称是否使用骆驼命名</param>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Replace操作
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="pathSeletor">path选择器</param>
            <param name="value">替换成的值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Remove操作
            </summary>
            <typeparam name="TField"></typeparam>
            <param name="pathSeletor">path选择器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.GetExpressionPath(System.Linq.Expressions.LambdaExpression)">
            <summary>
            返回表示式对应的path
            </summary>
            <param name="pathSeletor">path选择器</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            返回成员的名称
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor">
            <summary>
            表示Path访问器
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.camelCase">
            <summary>
            属性名称是否使用骆驼命名
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.nameFunc">
            <summary>
            成员名称委托
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.path">
            <summary>
            path变量
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.#ctor(System.Linq.Expressions.LambdaExpression,System.Func{System.Reflection.MemberInfo,System.String},System.Boolean)">
            <summary>
            Path访问器
            </summary>
            <param name="pathSeletor">表达式</param>
            <param name="nameFunc">成员名称委托</param>
            <param name="camelCase">属性名称是否使用骆驼命名</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            访问成员时
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            访问二元表达式
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.JsonPatchDocument`1.PathVisitor.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.MulitpartFile">
            <summary>
            表示将自身作为multipart/form-data的一个文件项
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.MulitpartFile.stream">
            <summary>
            流
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.MulitpartFile.filePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.MulitpartFile.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.MulitpartFile.ContentType">
            <summary>
            获取或设置文件的Mime
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartFile.#ctor(System.Byte[],System.String)">
            <summary>
            将自身作为multipart/form-data的一个文件项
            </summary>
            <param name="buffer">数据</param>
            <param name="fileName">文件友好名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            将自身作为multipart/form-data的一个文件项
            </summary>
            <param name="stream">数据流</param>
            <param name="fileName">文件友好名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartFile.#ctor(System.String)">
            <summary>
            multipart/form-data的一个文件项
            </summary>
            <param name="localFilePath">本地文件路径</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartFile.WebApiClient#IApiParameterable#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            执行请求前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartFile.GetStream">
            <summary>
            获取文件流
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.MulitpartText">
            <summary>
            表示将自身作为multipart/form-data的一个文本项
            </summary>
        </member>
        <member name="F:WebApiClient.Parameterables.MulitpartText.stringValue">
            <summary>
            文本内容
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.MulitpartText.IgnoreWhenNull">
            <summary>
            获取或设置当值为null是否忽略提交
            默认为false
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.#ctor(System.Object)">
            <summary>
            将自身作为multipart/form-data的一个文本项
            </summary>     
            <param name="value">文本内容</param>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.#ctor(System.String)">
            <summary>
            multipart/form-data的一个文本项
            </summary>     
            <param name="value">文本内容</param>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.WebApiClient#IApiParameterable#BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.String)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从string类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Int32)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从int类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Nullable{System.Int32})~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从int?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Decimal)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从decimal类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Nullable{System.Decimal})~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从decimal?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Single)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从float类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Nullable{System.Single})~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从float?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Double)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从double类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Nullable{System.Double})~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从double?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.DateTime)~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从DateTime类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.MulitpartText.op_Implicit(System.Nullable{System.DateTime})~WebApiClient.Parameterables.MulitpartText">
            <summary>
            从DateTime?类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Parameterables.Timeout">
            <summary>
            表示将自身作为请求的超时时间控制
            </summary>
        </member>
        <member name="P:WebApiClient.Parameterables.Timeout.TimeSpan">
            <summary>
            获取超时时间
            </summary>
        </member>
        <member name="M:WebApiClient.Parameterables.Timeout.#ctor(System.Int32)">
            <summary>
            请求的超时时间
            </summary>
            <param name="milliseconds">超时时间的毫秒数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.Timeout.#ctor(System.TimeSpan)">
            <summary>
            请求的超时时间
            </summary>
            <param name="timeSpan">超时时间</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:WebApiClient.Parameterables.Timeout.BeforeRequestAsync(WebApiClient.Contexts.ApiActionContext,WebApiClient.Contexts.ApiParameterDescriptor)">
            <summary>
            http请求之前
            </summary>
            <param name="context">上下文</param>
            <param name="parameter">特性关联的参数</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.Timeout.op_Implicit(System.Int32)~WebApiClient.Parameterables.Timeout">
            <summary>
            从int类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Parameterables.Timeout.op_Implicit(System.TimeSpan)~WebApiClient.Parameterables.Timeout">
            <summary>
            从TimeSpan类型隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.ProxyValidator">
            <summary>
            代理验证器
            提供代理的验证
            </summary>
        </member>
        <member name="P:WebApiClient.ProxyValidator.WebProxy">
            <summary>
            获取代理
            </summary>
        </member>
        <member name="M:WebApiClient.ProxyValidator.#ctor(System.String,System.Int32)">
            <summary>
            代理验证器
            </summary>
            <param name="proxyHost">代理服务器域名或ip</param>
            <param name="proxyPort">代理服务器端口</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.ProxyValidator.#ctor(System.Net.IWebProxy)">
            <summary>
            代理验证器
            </summary>
            <param name="webProxy">代理</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WebApiClient.ProxyValidator.Validate(System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">发送或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.ValidateAsync(System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">连接或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.Validate(System.Net.IWebProxy,System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="webProxy">web代理</param>      
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">发送或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>    
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.ValidateAsync(System.Net.IWebProxy,System.Uri,System.Nullable{System.TimeSpan})">
            <summary>
            使用http tunnel检测代理状态
            </summary>
            <param name="webProxy">web代理</param>      
            <param name="targetAddress">目标地址，可以是http或https</param>
            <param name="timeout">连接或等待数据的超时时间</param>
            <exception cref="T:System.ArgumentNullException"></exception>    
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.CastToHttpProxy(System.Net.IWebProxy,System.Uri)">
            <summary>
            IWebProxy转换为HttpProxy
            </summary>
            <param name="webProxy"></param>
            <param name="targetAddress"></param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.ProxyValidator.ParseStatusCode(System.Byte[],System.Int32)">
            <summary>
            解析响应的状态码
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.RetryHandleExtend">
            <summary>
            提供ITask的扩展
            </summary>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.Retry``1(WebApiClient.ITask{``0},System.Int32)">
            <summary>
            返回提供请求重试的请求任务对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="maxCount">最大重试次数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.Retry``1(WebApiClient.ITask{``0},System.Int32,System.TimeSpan)">
            <summary>
            返回提供请求重试的请求任务对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="maxCount">最大重试次数</param>
            <param name="delay">各次重试的延时时间</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.Retry``1(WebApiClient.ITask{``0},System.Int32,System.Func{System.Int32,System.TimeSpan})">
            <summary>
            返回提供请求重试的请求任务对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="maxCount">最大重试次数</param>
            <param name="delay">各次重试的延时时间</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.Handle``1(WebApiClient.ITask{``0})">
            <summary>
            返回提供异常处理请求任务对象
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.HandleAsDefaultWhenException``1(WebApiClient.ITask{``0})">
            <summary>
            当遇到异常时返回默认值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.RetryHandleExtend.HandleAsDefaultWhenException``1(WebApiClient.ITask{``0},System.Action{System.Exception})">
            <summary>
            当遇到异常时返回默认值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="task"></param>
            <param name="handler">异常处理委托</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.TagItem">
            <summary>
            表示Tags的一个数据项
            </summary>
        </member>
        <member name="F:WebApiClient.TagItem.value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:WebApiClient.TagItem.IsNull">
            <summary>
            获取值是否为NULL
            </summary>
        </member>
        <member name="P:WebApiClient.TagItem.Value">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:WebApiClient.TagItem.#ctor(System.Object)">
            <summary>
            ITag的数据项
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:WebApiClient.TagItem.As``1">
            <summary>
            强制转换为指定类型
            为null则返回目标类型的默认值
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TagItem.As``1(``0)">
            <summary>
            强制转换为指定类型
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TagItem.AsInt32">
            <summary>
            转换为int
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TagItem.AsBoolean">
            <summary>
            转换为bool
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TagItem.AsDateTime">
            <summary>
            转换为时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.TagItem.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:WebApiClient.Tags">
            <summary>
            表示自定义数据的存储和访问容器
            线程安全类型
            </summary>
        </member>
        <member name="F:WebApiClient.Tags.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:WebApiClient.Tags.lazy">
            <summary>
            数据字典
            </summary>
        </member>
        <member name="M:WebApiClient.Tags.#ctor">
            <summary>
            定义数据的存储和访问容器
            </summary>
        </member>
        <member name="P:WebApiClient.Tags.Id">
            <summary>
            获取或设置唯一标识符
            </summary>
        </member>
        <member name="P:WebApiClient.Tags.Item(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Tags.Get(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Tags.Remove(System.String)">
            <summary>
            删除键
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:WebApiClient.Tags.Set(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:WebApiClient.Tags.DebugView">
            <summary>
            调试视图
            </summary>
        </member>
        <member name="F:WebApiClient.Tags.DebugView.value">
            <summary>
            查看的对象
            </summary>
        </member>
        <member name="M:WebApiClient.Tags.DebugView.#ctor(WebApiClient.Tags)">
            <summary>
            调试视图
            </summary>
            <param name="target">查看的对象</param>
        </member>
        <member name="P:WebApiClient.Tags.DebugView.Values">
            <summary>
            查看的内容
            </summary>
        </member>
    </members>
</doc>
